P : 96
reward : [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
explosion : [[1,0,1,1,1,0,1,0,1,1,1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0],[0,1,0,1,1,1,0,1,0,1,1,1,1,1,0,0,0,0,0,0,1,1,0,1,1,0,0,1,1,0],[0,0,1,1,1,0,1,1,0,1,0,0,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0]]
T : 30
subjID : [101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104]
pumps : [[14,81,45,27,95,75,26,75,38,56,88,50,6,50,20,30,45,50,40,50,50,24,11,50,40,40,25,40,50,40],[39,45,90,40,12,55,68,64,76,48,36,56,33,22,30,30,50,60,50,30,38,46,50,50,2,40,40,36,38,30],[50,80,65,80,36,70,55,5,57,88,30,40,30,56,40,40,55,3,30,50,50,42,28,40,40,40,40,38,40,40]]
Tsubj : [30, 30, 30]
N : 3
trial : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
group : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
transformeddata{
  
  int d[N, T, P]

  for (j in 1:N) {
    for (k in 1:Tsubj[j]) {
      for (l in 1:P) {
        if (l <= pumps[j, k])
          d[j, k, l] = 1
        else
          d[j, k, l] = 0
      }
    }
  }
}

transformedparam {
  
  vector<lower=0,upper=1>[N] phi
  vector<lower=0>[N] eta
  vector<lower=0>[N] gam
  vector<lower=0>[N] tau

  phi = Phi_approx(mu_pr[1] + sigma[1] * phi_pr)
  eta = exp(mu_pr[2] + sigma[2] * eta_pr)
  gam = exp(mu_pr[3] + sigma[3] * gam_pr)
  tau = exp(mu_pr[4] + sigma[4] * tau_pr)
}


  
  mu_pr  := normal<4>(0, 1)
  sigma := normal<4>(0, 0.2)<lower=0>

  phi_pr := normal<N>(0, 1)
  eta_pr := normal<N>(0, 1)
  gam_pr := normal<N>(0, 1)
  tau_pr := normal<N>(0, 1)

  
  for (j in 1:N) {
    
    int n_succ
    int n_pump
    n_succ = 0
    n_pump = 0
    for (k in 1:Tsubj[j]) {
      float p_burst  
      float omega    

      p_burst = 1 - ((phi[j] + eta[j] * n_succ) / (1 + eta[j] * n_pump))
      omega = -gam[j] / log1m(p_burst)

      
      for (l in 1:(pumps[j, k] + 1 - explosion[j, k]))
        observe(bernoulli_logit(tau[j] * (omega - l)),d[j, k, l])

      
      n_succ = n_succ + pumps[j, k] - explosion[j, k]
      n_pump = n_pump + pumps[j, k]
    }
  }















































