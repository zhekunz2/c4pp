K : 3
T_unsup : 500
beta : <0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1>[V]
u : [1, 3, 3, 7, 1, 3, 8, 3, 1, 3, 7, 1, 7, 7, 8, 1, 1, 7, 8, 1, 3, 8, 8, 1, 3, 7, 1, 7, 1, 3, 7, 8, 8, 3, 7, 1, 7, 8, 8, 1, 8, 8, 7, 8, 7, 1, 2, 1, 1, 1, 7, 1, 7, 8, 1, 3, 8, 8, 1, 3, 8, 3, 1, 8, 1, 3, 8, 7, 1, 1, 8, 3, 7, 1, 3, 7, 7, 7, 1, 3, 3, 3, 1, 7, 8, 8, 3, 7, 8, 3, 7, 8, 1, 3, 8, 1, 7, 1, 1, 1, 3, 8, 8, 1, 3, 1, 7, 1, 3, 8, 7, 1, 3, 8, 1, 3, 8, 7, 8, 2, 8, 1, 3, 7, 8, 8, 3, 2, 1, 3, 8, 1, 1, 7, 7, 7, 1, 1, 7, 8, 7, 8, 8, 7, 8, 8, 1, 3, 8, 1, 3, 7, 8, 3, 8, 1, 3, 7, 8, 7, 8, 7, 8, 1, 3, 8, 8, 1, 3, 8, 8, 8, 7, 1, 2, 8, 1, 8, 7, 1, 1, 1, 7, 7, 8, 7, 8, 8, 8, 8, 8, 1, 8, 8, 2, 1, 1, 1, 3, 7, 1, 3, 7, 8, 1, 7, 3, 8, 8, 1, 8, 3, 1, 8, 1, 1, 8, 8, 8, 8, 7, 3, 7, 8, 1, 3, 8, 7, 8, 7, 7, 1, 3, 8, 1, 7, 8, 7, 1, 3, 7, 8, 3, 8, 1, 3, 7, 1, 3, 8, 8, 1, 1, 8, 3, 7, 1, 3, 7, 1, 8, 1, 8, 1, 2, 8, 1, 7, 1, 3, 7, 8, 8, 4, 8, 8, 3, 8, 1, 3, 3, 8, 8, 3, 8, 8, 7, 1, 8, 7, 7, 2, 7, 1, 3, 8, 8, 3, 1, 8, 7, 1, 3, 8, 1, 1, 7, 7, 8, 3, 8, 1, 1, 8, 8, 8, 1, 3, 8, 8, 3, 1, 3, 7, 8, 7, 1, 3, 8, 8, 7, 3, 2, 3, 3, 7, 8, 3, 8, 1, 3, 8, 8, 8, 2, 1, 1, 8, 7, 7, 1, 3, 7, 1, 8, 8, 1, 1, 1, 3, 7, 8, 3, 7, 7, 1, 1, 3, 8, 1, 3, 7, 8, 1, 1, 3, 1, 7, 8, 3, 8, 8, 1, 7, 8, 1, 3, 7, 1, 8, 8, 7, 2, 1, 3, 8, 1, 7, 8, 3, 8, 7, 7, 7, 1, 7, 1, 7, 7, 8, 3, 8, 1, 7, 1, 7, 1, 7, 3, 3, 8, 1, 3, 3, 7, 8, 1, 2, 7, 7, 7, 1, 1, 7, 1, 3, 8, 1, 7, 1, 1, 8, 8, 1, 3, 3, 8, 1, 8, 1, 1, 7, 3, 1, 7, 7, 7, 8, 8, 1, 2, 7, 8, 1, 1, 7, 8, 1, 3, 8, 1, 1, 1, 3, 8, 7, 8, 3, 8, 8, 1, 3, 8, 8, 3, 5, 3, 7, 1, 3, 8, 8, 3, 3, 8, 1, 1, 1, 7, 7][T_unsup]
T : 100
w : [8, 1, 1, 8, 3, 3, 8, 8, 1, 3, 7, 8, 1, 7, 1, 3, 8, 7, 1, 8, 3, 8, 8, 8, 8, 1, 8, 1, 3, 3, 7, 1, 1, 7, 8, 3, 1, 3, 8, 1, 8, 3, 3, 7, 1, 3, 2, 8, 1, 3, 7, 7, 8, 3, 8, 1, 3, 8, 1, 7, 1, 3, 7, 1, 2, 8, 8, 3, 7, 8, 1, 7, 8, 1, 3, 7, 8, 1, 1, 8, 8, 8, 8, 1, 7, 6, 7, 1, 3, 8, 1, 3, 8, 1, 8, 1, 3, 8, 7, 8][T]
V : 10
alpha : <1, 1, 1>[K]
z : [3, 1, 2, 3, 1, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 1, 2, 2, 2, 3, 1, 2, 2, 2, 3, 1, 2, 3, 1, 1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 2, 1, 1, 2, 3, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2, 3, 1, 2, 3, 2, 3, 1, 2, 3, 2, 2, 3, 1, 2, 3, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2, 2, 2, 2, 3, 2, 3, 2, 3, 1, 2, 3, 1, 2, 3, 2, 3, 1, 2, 2, 2][T]
float acc[K]
float gamma[T_unsup,K]
for(k in 1:K)
{
    theta[k] := dirichlet<K>(alpha)[K]
}
for(k in 1:K)
{
    phi[k] := dirichlet<V>(beta)[K]
}
for(t in 1:T)
{
    observe(categorical(phi[z[t]]),w[t])
}
for(t in 2:T)
{
    observe(categorical(theta[z[t-1]]),z[t])
}
for(k in 1:K)
{
    gamma[1,k] = log(phi[k,u[1]])
}
for(t in 2:T_unsup)
{
    for(k in 1:K)
    {
        for(j in 1:K)
        {
            acc[j] = gamma[t-1,j]+log(theta[j,k])+log(phi[k,u[t]])
        }
        gamma[t,k] = log_sum_exp(acc)
    }
}
increment_log_prob(log_sum_exp(gamma[T_unsup]))
generatedquantities{
    int<lower=1,upper=K> y_star[T_unsup]
    float log_p_y_star
    int back_ptr[T_unsup,K]
    float best_logp[T_unsup,K]
    float best_total_logp
    for(k in 1:K)
    {
        best_logp[1,K] = log(phi[k,u[1]])
    }
    for(t in 2:T_unsup)
    {
        for(k in 1:K)
        {
            best_logp[t,k] = negative_infinity()
            for(j in 1:K)
            {
                float logp
                logp = best_logp[t-1,j]+log(theta[j,k])+log(phi[k,u[t]])
                if(logp>best_logp[t,k])
                {
                    back_ptr[t,k] = j
                    best_logp[t,k] = logp
                }
            }
        }
    }
    log_p_y_star = max(best_logp[T_unsup])
    for(k in 1:K)
    {
        if(best_logp[T_unsup,k]==log_p_y_star)
        {
            y_star[T_unsup] = k
        }
    }
    for(t in 1:(T_unsup-1))
    {
        y_star[T_unsup-t] = back_ptr[T_unsup-t+1,y_star[T_unsup-t+1]]
    }
}
posterior(theta)
posterior(phi)
