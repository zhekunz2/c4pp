import pyro, numpy as np, torch, pyro.distributions   as dist, torch.nn as nn
from pyro.optim import Adam
import torch.distributions.constraints as constraints
from pyro.infer import SVI
if pyro.__version__ > '0.1.2': from pyro.infer import Trace_ELBO
from pyro.contrib.autoguide import *
import math
def amb(x):
    return x.data.numpy().tolist() if isinstance(x, torch.Tensor) else x
watched_hat= np.array([1.012087, 1.0272441, 0.6239532, 0.6087961, 0.7906812, 0.6845816, 0.6138485, 1.1383961, 1.1181866, 1.0878725, 0.7957336, 0.6795292, 0.593639, 0.9514586, 0.9716681, 0.956511, 0.9716681, 0.956511, 0.9767205, 0.649215, 1.0171394, 1.024923, 0.9946089, 0.9794518, 0.9845041, 1.0198707, 0.7654194, 1.0148183, 0.6721558, 0.9743994, 0.969347, 0.9895565, 1.024923, 1.0047136, 1.0350278, 1.009766, 0.6418416, 0.6671034, 1.0299754, 1.0400801, 1.0198707, 1.0148183, 0.6671034, 0.6165798, 0.6974176, 0.6721558, 0.7984649, 0.9996612, 1.024923, 0.7833078, 0.6087961, 0.7502623, 0.6087961, 0.6087961, 0.6037438, 0.6290056, 0.9666157, 0.6391103, 0.6037438, 0.6189009, 0.7597769, 0.6435725, 0.6486249, 0.663782, 0.7726129, 1.0698042, 1.0013921, 1.0216016, 0.6536773, 0.6334678, 0.7473511, 0.7018799, 0.9912874, 1.0569681, 1.03949, 1.1304325, 1.0445424, 1.0620205, 1.0216016, 0.6968275, 0.7069322, 1.1479107, 0.9912874, 0.9862351, 0.9963398, 1.0647518, 0.6334678, 0.6435725, 0.7827177, 0.8153529, 1.0114969, 1.1051707, 1.0647518, 1.0596995, 1.0900136, 1.0495947, 1.1203278, 0.7271417, 0.7018799, 0.6867228, 0.9811827, 1.0445424, 1.095066, 1.0647518, 1.0243329, 1.0064445, 1.0013921, 1.0900136, 1.0900136, 1.0596995, 0.9660256, 1.0546471, 1.0596995, 1.0091758, 0.7069322, 0.9151815, 0.5674666, 0.8646579, 0.8899197, 0.4990546, 0.5344211, 0.5041069, 0.5243164, 0.5624143, 0.9252862, 0.9050768, 0.9050768, 0.4838975, 0.5091593, 0.82656, 0.8770836, 0.9050768, 0.8545531, 0.8596055, 0.9252862, 0.5573619, 0.894972, 0.9151815, 0.8899197, 0.9151815, 0.935391, 0.9000244, 0.894972, 0.5798924, 0.894972, 0.9252862, 0.9101291, 0.8669789, 0.9000244, 0.8467695, 0.8316124, 0.4838975, 0.8164553, 0.8366647, 0.9023455, 0.8899197, 0.9303386, 0.9252862, 0.9101291, 0.9050768, 0.9000244, 0.9101291, 0.8899197, 0.8848673, 0.894972, 0.8848673, 0.9000244, 0.8596055, 0.894972, 0.5523095, 0.8669789, 0.8848673, 0.5472572, 0.8848673, 0.9000244, 0.9303386, 0.8697102, 0.572519, 0.8747626, 0.2752748, 0.2853795, 0.2702224, 0.2904319, 0.2247512, 0.305589, 0.2702224, 0.6179373, 0.6533039, 0.572466, 0.6078326, 0.6128849, 0.6330944, 0.3257984, 0.361165, 0.3561126, 0.305589, 0.2954843, 0.2146464, 0.2752748, 0.2702224, 0.2954843, 0.6381468, 0.6610875, 0.6661399, 0.6762446, 0.681297, 0.6762446, 0.681297, 0.6964541, 0.3689487, 0.2982156, 0.3285297, 0.3588439, 0.3234774, 0.3032679, 0.6914017, 0.6509828, 0.6661399, 0.6610875, 0.2853795, 0.6762446, 0.6914017, 0.6945358, 0.740007, 0.7450594, 0.7096928, 0.7349547, 0.3922921, 0.3367161, 0.3720827, 0.5135489, 0.6995881, 0.9319968, 0.7197976, 0.7804259, 0.7299023, 0.7349547, 0.7197976, 0.7349547, 0.7096928], dtype=np.float32).reshape(240,1)
watched_hat=torch.tensor(watched_hat)
site= np.array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], dtype=np.float32).reshape(240,1)
site=torch.tensor(site)
N=240
N=torch.tensor(N)
setting= np.array([2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 1.0, 1.0, 2.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 1.0, 2.0, 2.0, 1.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 2.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], dtype=np.float32).reshape(240,1)
setting=torch.tensor(setting)
y= np.array([30.0, 37.0, 46.0, 14.0, 63.0, 36.0, 45.0, 47.0, 50.0, 52.0, 52.0, 29.0, 16.0, 28.0, 21.0, 45.0, 24.0, 16.0, 46.0, 50.0, 48.0, 42.0, 23.0, 27.0, 13.0, 18.0, 27.0, 17.0, 20.0, 15.0, 11.0, 17.0, 43.0, 27.0, 41.0, 23.0, 39.0, 12.0, 17.0, 16.0, 22.0, 19.0, 11.0, 6.0, 8.0, 48.0, 48.0, 36.0, 20.0, 13.0, 10.0, 47.0, 13.0, 32.0, 15.0, 14.0, 21.0, 16.0, 15.0, 20.0, 48.0, 19.0, 31.0, 28.0, 40.0, 46.0, 43.0, 47.0, 38.0, 42.0, 49.0, 17.0, 23.0, 42.0, 43.0, 48.0, 51.0, 45.0, 50.0, 30.0, 45.0, 53.0, 45.0, 21.0, 43.0, 37.0, 51.0, 20.0, 32.0, 51.0, 16.0, 36.0, 40.0, 36.0, 46.0, 43.0, 42.0, 33.0, 23.0, 19.0, 47.0, 36.0, 48.0, 36.0, 42.0, 29.0, 45.0, 37.0, 48.0, 48.0, 35.0, 21.0, 26.0, 32.0, 15.0, 11.0, 14.0, 19.0, 16.0, 18.0, 44.0, 16.0, 35.0, 15.0, 12.0, 18.0, 15.0, 13.0, 17.0, 13.0, 31.0, 13.0, 13.0, 13.0, 36.0, 15.0, 22.0, 26.0, 13.0, 14.0, 46.0, 25.0, 26.0, 42.0, 15.0, 25.0, 43.0, 27.0, 14.0, 17.0, 15.0, 16.0, 15.0, 23.0, 7.0, 14.0, 24.0, 17.0, 16.0, 37.0, 8.0, 32.0, 22.0, 22.0, 28.0, 20.0, 6.0, 14.0, 15.0, 11.0, 20.0, 16.0, 29.0, 22.0, 13.0, 20.0, 12.0, 16.0, 19.0, 16.0, 11.0, 16.0, 19.0, 11.0, 15.0, 14.0, 16.0, 13.0, 13.0, 24.0, 13.0, 25.0, 25.0, 43.0, 44.0, 13.0, 15.0, 0.0, 18.0, 10.0, 15.0, 33.0, 19.0, 15.0, 41.0, 30.0, 24.0, 45.0, 17.0, 14.0, 15.0, 14.0, 19.0, 17.0, 16.0, 32.0, 18.0, 40.0, 23.0, 23.0, 23.0, 46.0, 11.0, 20.0, 44.0, 19.0, 13.0, 15.0, 13.0, 16.0, 49.0, 13.0, 54.0, 34.0, 44.0, 33.0, 26.0, 19.0, 35.0, 32.0], dtype=np.float32).reshape(240,1)
y=torch.tensor(y)
pretest= np.array([23.0, 26.0, 14.0, 11.0, 47.0, 26.0, 12.0, 48.0, 44.0, 38.0, 48.0, 25.0, 8.0, 11.0, 15.0, 12.0, 15.0, 12.0, 16.0, 19.0, 24.0, 15.0, 9.0, 6.0, 7.0, 14.0, 42.0, 13.0, 13.0, 5.0, 4.0, 8.0, 15.0, 11.0, 17.0, 12.0, 7.0, 12.0, 16.0, 18.0, 14.0, 13.0, 12.0, 2.0, 18.0, 13.0, 38.0, 10.0, 15.0, 35.0, 11.0, 39.0, 11.0, 11.0, 10.0, 15.0, 14.0, 17.0, 10.0, 13.0, 35.0, 12.0, 13.0, 16.0, 27.0, 18.0, 15.0, 19.0, 14.0, 10.0, 22.0, 13.0, 13.0, 26.0, 12.0, 30.0, 13.0, 27.0, 19.0, 12.0, 14.0, 44.0, 13.0, 12.0, 14.0, 17.0, 10.0, 12.0, 29.0, 46.0, 17.0, 25.0, 17.0, 16.0, 22.0, 14.0, 28.0, 18.0, 13.0, 10.0, 11.0, 13.0, 23.0, 17.0, 9.0, 16.0, 15.0, 22.0, 22.0, 16.0, 8.0, 15.0, 16.0, 6.0, 14.0, 16.0, 15.0, 6.0, 11.0, 12.0, 19.0, 13.0, 17.0, 14.0, 18.0, 14.0, 14.0, 9.0, 14.0, 9.0, 19.0, 14.0, 4.0, 5.0, 18.0, 13.0, 12.0, 16.0, 11.0, 16.0, 20.0, 13.0, 12.0, 28.0, 12.0, 18.0, 15.0, 17.0, 13.0, 13.0, 10.0, 9.0, 7.0, 11.0, 24.0, 11.0, 19.0, 18.0, 15.0, 14.0, 13.0, 15.0, 11.0, 10.0, 12.0, 10.0, 13.0, 5.0, 12.0, 12.0, 17.0, 10.0, 11.0, 10.0, 13.0, 19.0, 7.0, 16.0, 8.0, 13.0, 15.0, 12.0, 16.0, 3.0, 19.0, 12.0, 13.0, 20.0, 4.0, 11.0, 12.0, 16.0, 23.0, 30.0, 29.0, 19.0, 17.0, 1.0, 13.0, 12.0, 17.0, 17.0, 11.0, 12.0, 14.0, 15.0, 14.0, 15.0, 18.0, 21.0, 7.0, 13.0, 19.0, 12.0, 8.0, 17.0, 9.0, 12.0, 11.0, 15.0, 14.0, 17.0, 8.0, 17.0, 18.0, 11.0, 16.0, 16.0, 5.0, 12.0, 40.0, 9.0, 55.0, 13.0, 25.0, 15.0, 16.0, 13.0, 16.0, 11.0], dtype=np.float32).reshape(240,1)
pretest=torch.tensor(pretest)
def model(watched_hat,site,N,setting,y,pretest):
    site2 = torch.zeros([amb(N)])
    site3 = torch.zeros([amb(N)])
    site4 = torch.zeros([amb(N)])
    site5 = torch.zeros([amb(N)])
    for i in range(1, N+1):
        site2[i-1]=site[i-1]==2
        site3[i-1]=site[i-1]==3
        site4[i-1]=site[i-1]==4
        site5[i-1]=site[i-1]==5
    with pyro.iarange('beta_range_'.format('')):
        beta = pyro.sample('beta'.format(''), dist.Normal(torch.tensor(1234.0)*torch.ones([amb(8)]),torch.tensor(1234.0)*torch.ones([amb(8)])))
    sigma = pyro.sample('sigma'.format(''), dist.Normal(torch.tensor(1234.0)*torch.ones([amb(1)]),torch.tensor(1234.0)*torch.ones([amb(1)])))
    pyro.sample('obs__100'.format(), dist.Normal(beta[0-1]+beta[1-1]*watched_hat+beta[2-1]*pretest+beta[3-1]*site2+beta[4-1]*site3+beta[5-1]*site4+beta[6-1]*site5+beta[8-1]*setting,sigma), obs=y)
    
def guide(watched_hat,site,N,setting,y,pretest):
    for i in range(1, N+1):
        pass
    arg_1 = pyro.param('arg_1', torch.ones((amb(8))), constraint=constraints.positive)
    arg_2 = pyro.param('arg_2', torch.ones((amb(8))), constraint=constraints.positive)
    with pyro.iarange('beta_prange'):
        beta = pyro.sample('beta'.format(''), dist.Gamma(arg_1,arg_2))
    arg_3 = pyro.param('arg_3', torch.ones((amb(1))))
    arg_4 = pyro.param('arg_4', torch.ones((amb(1))), constraint=constraints.positive)
    sigma = pyro.sample('sigma'.format(''), dist.Normal(arg_3,arg_4))
    
    pass
    return { "beta": beta,"sigma": sigma, }
optim = Adam({'lr': 0.05})
svi = SVI(model, guide, optim, loss=Trace_ELBO() if pyro.__version__ > '0.1.2' else 'ELBO')
for i in range(4000):
    loss = svi.step(watched_hat,site,N,setting,y,pretest)
    if ((i % 1000) == 0):
        print(loss)
for name in pyro.get_param_store().get_all_param_names():
    print(('{0} : {1}'.format(name, pyro.param(name).data.numpy())))
print('beta_mean', np.array2string(dist.Gamma(pyro.param('arg_1'), pyro.param('arg_2')).mean.detach().numpy(), separator=','))
print('sigma_mean', np.array2string(dist.Normal(pyro.param('arg_3'), pyro.param('arg_4')).mean.detach().numpy(), separator=','))
np.set_printoptions(threshold=np.inf)
with open('samples','w') as samplefile:
    samplefile.write('beta:')
    samplefile.write(np.array2string(np.array([guide(watched_hat,site,N,setting,y,pretest)['beta'].data.numpy() for _ in range(1000)]), separator=',').replace('\n',''))
    samplefile.write('\n')
    samplefile.write('sigma:')
    samplefile.write(np.array2string(np.array([guide(watched_hat,site,N,setting,y,pretest)['sigma'].data.numpy() for _ in range(1000)]), separator=',').replace('\n',''))
    samplefile.write('\n')
