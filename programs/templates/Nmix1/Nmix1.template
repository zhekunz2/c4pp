functions {
  float bivariate_poisson_log_lpmf(int[] n, float log_lambda, float p) {
    float s[min(n) + 1]
    float log_theta_1
    float log_theta_0
    log_theta_1 = log_lambda + log(p) + log1m(p)
    log_theta_0 = log_lambda + log(p) * 2
    if (size(n) != 2)
      reject("Size of n must be 2.")
    if (p < 0)
      reject("p must be in [0,1].")
     if( p > 1)
      reject("p must be in [0,1].")
    for (u in 0:min(n)){
      s[u + 1] = poisson_log_lpmf(n[1] - u , log_theta_1)
               + poisson_log_lpmf(n[2] - u , log_theta_1)
               + poisson_log_lpmf(u , log_theta_0)
               }
    return(log_sum_exp(s))
  }

  float poisbin_lpmf(int[] y, int n, float log_lambda, float p) {

    if (max(y) > n)
      return(negative_infinity())

    return(poisson_log_lpmf(n , log_lambda)
          + binomial_lpmf(y , n, p))
  }
}
R : 95
T : 2
K : 100
y : [[[ 0, 0, 0, 1, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0,-1, 0],  [-1, 0, 0, 0, 0, 0,-1]], [[ 0, 0, 0,-1, 0, 0,-1],  [ 0, 0, 0, 0,-1, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0,-1, 0, 0, 0, 0, 0]], [[ 0,-1, 0, 0, 0, 0, 0],  [ 1, 0, 0,-1, 0, 0, 0]], [[-1, 0, 0, 0,-1,-1,-1],  [ 0,-1, 0, 0,-1, 0, 0]], [[ 0, 0, 0, 0, 0,-1,-1],  [-1,-1, 0,-1, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 1, 0, 0, 0, 0]], [[ 0, 0,-1, 0,-1, 0, 0],  [ 0, 0, 0,-1, 0, 0, 0]], [[-1, 0, 0,-1, 0, 0, 0],  [ 0,-1, 0, 0, 0, 0, 0]], [[ 0, 0, 1, 0, 0,-1, 0],  [ 0, 0, 0, 0, 0,-1, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [-1, 0, 0, 0,-1, 0, 0]], [[ 0,-1,-1,-1, 0,-1, 0],  [ 0,-1, 0, 0, 0, 0, 0]], [[ 0, 0,-1,-1,-1,-1, 0],  [-1, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0,-1, 0, 0]], [[-1, 0, 0, 0, 0,-1, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0,-1, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0,-1, 0, 0],  [ 0,-1, 0, 0, 0, 0, 0]], [[-1, 0, 0, 0, 0,-1, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0,-1, 0, 0,-1, 0, 0]], [[ 0, 0,-1, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0,-1]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0,-1, 0, 0, 0,-1, 0],  [ 0, 0, 0, 0,-1, 0, 0]], [[ 0, 0,-1, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 1, 0],  [ 0, 0, 0, 0, 1, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 5]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 1, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 2, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 2, 0, 0, 1, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 7, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 1, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 5]], [[ 0, 1, 0, 0, 2, 0, 0],  [ 0, 0, 0, 0, 1, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 2],  [ 0, 4, 0, 0, 0, 1, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 2, 0, 0, 0, 0, 0, 0]], [[ 0, 2, 1, 2, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 1, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 3, 0, 0, 0]], [[ 0, 1, 0, 0, 0, 0, 0],  [ 0, 1, 0, 0, 0, 0, 0]], [[ 0, 2, 0, 1, 0, 3, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 1, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 4, 0, 2],  [ 0, 0, 0, 0, 0, 1, 1]], [[ 2, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 1, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 2, 1],  [ 7, 0, 0, 0, 1, 1, 0]], [[ 0, 0, 0, 0, 0, 2, 0],  [ 0, 0, 0, 0, 0, 2, 0]], [[ 0, 0, 1, 0, 0, 0, 2],  [ 0, 0, 9, 0, 0, 0, 0]], [[ 1, 0, 0, 0, 0, 3, 0],  [ 1, 0, 0, 0, 0, 0, 0]], [[ 0, 5, 0, 0, 0, 0, 0],  [ 0, 0, 9, 3, 1, 2,13]], [[ 0, 0, 2, 0, 0, 0, 0],  [ 1, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 1, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 2, 0, 6, 0, 1],  [ 1, 0, 0, 1, 0, 0, 0]], [[ 0, 0, 0, 0, 1, 0, 0],  [ 0, 0, 1, 0, 0, 0, 2]], [[ 0, 0, 0, 0, 0, 0, 3],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 9, 1, 1, 0, 0],  [ 1, 3, 0, 0, 2, 3, 0]], [[ 1, 0, 0, 0, 0, 0, 4],  [ 4, 2, 4, 8, 0, 0, 1]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 3, 0, 1]], [[ 0, 0, 0, 0, 1, 0, 0],  [ 0, 0, 0, 2, 0, 0, 1]], [[ 0, 2, 0, 2, 0, 0,10],  [ 0, 0, 0, 0, 0, 0, 2]], [[ 0, 0, 0, 0, 0, 0, 3],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 1, 1, 0, 0, 0, 0, 0]], [[ 1, 0, 0, 0, 0, 1, 0],  [ 0, 0, 6, 1, 0, 0, 0]], [[ 0, 0, 1, 7, 2, 2, 0],  [ 5, 0, 1, 4, 0, 0, 0]], [[ 0, 4, 0, 0, 0, 1, 0],  [ 0, 2, 0, 1, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 2, 0, 4, 0]], [[ 3, 0, 0, 7, 0, 0, 0],  [ 0, 0, 0, 3, 0, 0, 0]], [[ 0, 0, 0, 2, 0, 0, 0],  [ 0, 0, 0, 0, 1, 0, 0]], [[ 0, 0, 0, 0, 1, 0, 0],  [ 0, 0, 0, 3, 0, 0, 1]], [[ 0, 0, 0, 0, 0, 0, 5],  [ 0, 0, 0, 0, 0, 0, 1]], [[14, 2, 1, 0,10, 0, 0],  [ 2, 0, 0, 0, 0, 3, 0]], [[ 0, 0, 3, 0, 0, 0, 0],  [ 1, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 1, 0, 1, 0, 1, 0, 0]], [[ 9, 0, 0, 0, 0, 0, 0],  [ 1, 0, 0, 1, 0, 0, 0]], [[ 1, 0, 0, 0, 1, 0, 0],  [ 0, 1,-1, 0, 0,-1, 0]], [[ 0, 0, 0,-1, 0, 0, 1],  [ 0, 0, 1, 0, 0, 0, 0]], [[-1, 0, 1, 2, 0, 1, 3],  [ 0, 0, 0, 1, 6, 2, 3]], [[ 0, 3,-1, 1, 1, 0,-1],  [ 0, 1, 2, 0, 0,-1, 1]], [[ 0, 0, 0,-1, 1, 0, 0],  [ 0, 0, 2, 1, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 8, 0, 0]], [[ 0, 0, 0, 0, 1, 1, 0],  [ 0, 0, 0, 2, 2, 0, 0]], [[ 0, 0, 0, 0, 0, 0,-1],  [ 0, 1,-1, 0, 0, 0, 0]], [[-1, 0, 0, 0, 0, 0, 2],  [ 0, 0, 0, 0,-1, 0, 0]], [[ 6, 0, 0, 1, 0, 0, 0],  [ 0, 5, 1, 1, 0, 1,-1]], [[ 0, 0, 0,-1, 0, 1, 3],  [ 0, 0,-1, 1, 0, 0, 1]], [[-1, 0, 0, 0, 0, 0, 1],  [ 0, 0, 0, 0, 0, 0, 0]]] [R, 2, 7]
first : [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 3, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 3, 1, 1, 1, 2, 2, 3, 1, 2, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 2] [R]
last : [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 7, 7, 6, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 7, 7, 7, 6, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7] [R]

transformeddata {
  int<lower=0> max_y[R, 7]
  int<lower=0> max_y_site[R]

  for (i in 1:R) {
    for (k in 1:(first[i] - 1)){
      max_y[i, k] = 0}
    for (k in (last[i] +1 ):7){
      max_y[i, k] = 0}
    for (k in first[i]:last[i]){
        int temp[T]
        for(kk in 1:T){
        temp[kk] = y[i, kk, k]
        }
        max_y[i, k] = max(temp)
      }
    max_y_site[i] = max(max_y[i])
  }
}


alpha_lam := normal<7>(0, 10)
omega := normal(1234.0, 1234.0)<lower=0,upper=1>
p := normal<7>(1234.0, 1234.0)<lower=0,upper=1>
for (i in 1:R) {
float lp
if (max_y_site[i]) {
  lp = bernoulli_lpmf(1 , omega)
  for (k in first[i]:last[i]){
      int temp[T]
      float tt
      for(kk in 1:T){
      temp[kk] = y[i, kk, k]
      }
      tt =  bivariate_poisson_log_lpmf(temp, alpha_lam[k], p[k])
      lp = lp  + tt
      }
  target = target + lp
} else {
  float lp2[2]

  lp2[1] = bernoulli_lpmf(0 , omega)
  lp2[2] = bernoulli_lpmf(1 , omega)
  for (k in first[i]:last[i]){
  int temp[T]
  float tt
   for(kk in 1:T){
      temp[kk] = y[i, kk, k]
      }

  tt=bivariate_poisson_log_lpmf(temp , alpha_lam[k], p[k])

  lp2[2] = lp2[2] + tt
      }
  target =  target + log_sum_exp(lp2)
}
}

generatedquantities {
  int totalN[7]
  float fit
  float fit_new
  vector[7] mean_abundance


    int N[R, 7]
    float eval[R, 7]
    int y_new[R, T, 7]
    matrix[T, 7] E[R]
    matrix[T, 7] E_new[R]
    fit = 0
    fit_new = 0

    N = rep_array(0, R, 7)
    E[1] = rep_matrix(0, T, 7)
    E_new[1] = rep_matrix(0, T, 7)
    for (i in 2:R) {
      E[i] = E[i - 1]
      E_new[i] = E_new[i - 1]
    }
    for (i in 1:R) {
      float log_p_unobs
      vector[K + 1] lp
      int temp[T]
      int res
      int f
      int l
      f=first[i]
      l=last[i]
      for (k in f:l) {
        for (n in 0:K){
           for(kk in 1:T){
                 temp[kk] = y[i, kk, k]
                       }
          lp[n + 1] = poisbin_lpmf(temp, n, alpha_lam[k], p[k])
          }
          N[i, k] = categorical_rng(softmax(lp)) - 1
      }

      if (max_y_site[i] == 0) {
        log_p_unobs = log(omega) + binomial_lpmf(0 , N[i], p) * T
        res=bernoulli_rng(exp(log_p_unobs))
        if (res == 0) {
          for (k in f:l){
            N[i, k] = 0
            }
        }
      }

      for (k in f:l) {
        eval[i, k] = p[k] * N[i, k]
        for (j in 1:T) {

          E[i, j, k] = square(y[i, j, k] - eval[i, k])
            / (eval[i, k] + 0.5)

          y_new[i, j, k] = binomial_rng(N[i, k], p[k])
          E_new[i, j, k] = square(y_new[i, j, k] - eval[i, k])
            / (eval[i, k] + 0.5)
        }
      }
    }
    for (k in 1:7){
        int tmp[R, 7]
        tmp = N[1:R]
      totalN[k] = sum(tmp[k])
      }
    for (i in 1:R) {
      fit = fit + sum(E[i])
      fit_new = fit_new + sum(E_new[i])
    }

  mean_abundance = exp(alpha_lam)
}
posterior(alpha_lam)
posterior(omega)
posterior(p)