import pyro, numpy as np, torch, pyro.distributions   as dist, torch.nn as nn
from pyro.optim import Adam
import torch.distributions.constraints as constraints
from pyro.infer import SVI
if pyro.__version__ > '0.1.2': from pyro.infer import Trace_ELBO
from pyro.contrib.autoguide import *
import math
def amb(x):
    return x.data.numpy().tolist() if isinstance(x, torch.Tensor) else x
y= np.array([-2.1786101625, -1.6064406158, -0.752202667768, -2.76598220475, -2.20776624198, -3.33324465863, -3.37178488583, -1.71977320663, -2.5454775832, -2.03389345886, -3.32145128636, -3.18878827458, -2.62332454463, -2.87597138354, -2.08452508214, -2.07157249963, -1.47760563899, -2.67751280326, -2.45119204811, -3.08512245496, -3.11341666746, -3.61080621555, -1.71813722114, -1.71394275946, -1.37011234244, -1.77023263636, -0.564363889631, -0.291886799838, -1.22772029699, -3.10324975727, -3.63559020976, -1.64658933037, -2.92436414598, -2.15033832944, -2.02369925006, -1.92790513337, -3.71096810021, -4.19852298635, -3.78808131103, -2.91615511685, -1.10227584541, -1.32947530005, -1.79377319841, -4.12974719759, -6.36896527872, -4.16189020218, -4.85382654106, -4.07993265589, -3.93463168802, -4.01547011803, -1.78251978042, -1.42021365387, -2.21946373269, -2.00547231413, -1.60946125813, -3.22748772495, -3.79283597547, -4.25002389926, -4.06638561094, -4.2103531294, -4.39954006231, -4.05237421396, -4.32933473043, -3.51747355494, -4.13516537362, -4.02097181066, -4.3763677944, -3.04583636212, -3.8297168723, -3.27645869623, -2.80014914118, -2.92113663125, -2.97051919109, -2.80855586955, -3.01643611209, -1.80927533634, -2.34651886858, -3.26176075396, -2.10640723065, -1.46329859238, -3.41345471974, -3.54365184593, -3.29652155417, -3.23023021269, -4.10791628788, -4.1933470169, -3.50472995319, -2.9155804308, -2.59856175442, -3.54115089105, -2.87833520057, -2.78305432665, -1.95217455925, -2.52035375362, -3.99667370379, -2.77218929685, -3.28033208529, -1.55163339824, -2.96139439005, -5.46023474029, -3.03817044308, -2.10137917438, -2.99098534992, -2.70886720436, -3.38643878534, -4.35599346209, -3.48614984913, -3.24188267871, -3.06341607247, -2.19859473501, -2.46026891459, -1.67167295234, -2.97700166053, -2.40209786715, -2.12888159665, -2.38394688619, -1.49470521061, -1.79852485982, -2.39846805728, -1.27313163422, -1.54940010506, -3.41653123667, -1.14836739465, -1.84766084666, -2.00765634194, -2.86180177602, -3.96015080086, -5.24969867418, -4.67029850436, -5.23562745442, -2.97940791869, -4.00603765113, -4.63670291951, -4.05705863421, -2.95370030374, -3.29807093036, -3.57065617614, -4.95097300326, -3.53059407869, -3.81300596793, -4.48984036542, -4.53837167694, -4.13719658482, -4.4286219519, -5.58957344154, -3.80136295664, -2.6019087808, -2.57993907552, -4.64729409218, -4.30287008259, -4.33827175177, -3.35046593472, -4.3217517172, -3.4644734128, -1.65467108232, -1.81015653322, -2.46511792908, -2.13401014616, -2.82368220467, -2.90189524956, -3.47806172812, -3.66655243341, -3.58128620791, -3.67872822309, -4.27006680665, -4.77625348713, -2.74130244583, -3.94374177215, -4.16773590167, -3.71867211813, -4.28020939079, -3.4043064372, -2.00479383751, -2.49625093603, -1.39534300354, -2.0091133662, -2.73867894688, -2.26853193477, -0.223250002616, -1.55908327515, -2.76160859986, -2.63929098645, -3.91705117809, -5.0971125389, -2.96002646672, -2.66052164492, -2.32981094662, -1.65805490548, -1.80486449848, -3.10419025971, -4.41856908945, -4.30562450333, -4.62043650911, -3.20854785254, -3.25319999605, -3.22584708008, -4.33433010411, -3.02769554683, -2.96878492344, -3.10250660702], dtype=np.float32).reshape(200,1)
y=torch.tensor(y)
x= np.array([-1.24031489649, 0.828007706133, 0.517114129791, -1.24356650086, 1.4669135613, 0.0988417278101, -0.845604324065, 1.5560567331, 0.382690189162, -0.079646957671, 0.00996740517379, -0.080508584305, 0.0607976667985, -0.942350941293, 0.262257522741, 1.10459165755, 0.590885563639, -0.638537611571, 0.601664814409, -0.0308378224726, -0.223512471265, -0.833921849665, 1.73016320961, 0.945089392919, -0.656190578161, -0.709821355802, 1.85113691204, 0.90362259868, -0.139002698791, -0.497472163454, -1.05031808411, 2.24528131045, -1.14123712471, 1.09937991529, -0.228607373218, 0.420969513087, -2.19540855628, -0.305173416895, -0.265693394933, 0.0870377071461, 1.07269051377, -0.0361071682551, 1.00994066118, -2.41703863798, -2.22611382256, -0.691665758973, -1.35046753109, 0.438656165233, -0.14379222474, -0.836864085998, 1.46252438689, 1.11038113649, -0.756116339431, 0.49233818972, 0.259697354533, -0.426761080774, -0.297988711386, -0.930302097682, -0.188485976775, -1.38247160629, -0.59255459509, 0.0819069105267, -0.113175067297, 1.51101221756, -0.398009741255, -0.144506694157, -1.40247611363, -0.214921815656, -2.02086695811, -0.118772226229, 0.59284503082, 0.574099646768, 0.294939722952, -0.00775584231393, 0.378415418387, 0.791875816146, -0.929700449233, 0.12305892914, 1.17218097636, 1.23913954966, -1.65484395082, -0.186653297414, -0.532532216546, 0.429763403252, -0.241913641631, -0.761083610847, -0.730074615472, 0.226667021941, -0.430128070069, -0.673854043999, 0.576064340655, -0.53528253335, 0.445125042949, 0.376575833688, -1.27827785875, 1.23958408821, 0.373204207632, 0.676825742381, -0.789426816663, -2.13261508149, 0.422537635869, 0.193473994692, -0.609941642346, 0.11965626412, 0.14999386049, -2.5844060332, 1.47693361705, 0.84844044352, -0.599177628455, 0.745504268416, 0.58373656095, 1.18362428699, -0.930079326692, 0.52175272709, 0.224226729786, 1.34953680591, 1.85432508062, 0.441831739345, -0.222228837968, 0.806592911641, 0.380324855243, -1.41416714375, 2.45685475616, 0.905538289675, 0.790088889333, 0.214580759725, -0.472890941493, -0.675957402245, 0.198682766842, -0.328156844362, 0.55552729143, -0.768957182244, -0.933870978833, -1.06677054474, 0.698764344607, -0.834169300387, 0.262701512292, -0.46613865751, 0.678043447219, -0.111140940888, -1.39271343868, -0.253763563713, -0.524662828429, -0.0245478524914, -2.17450792478, 0.924914449095, 0.217578322214, 0.659068995588, -1.49987767468, -0.685961666629, -1.40897166805, 0.615456570895, -0.693336746538, -0.772443847502, 2.11924588771, 0.846313141041, 0.3987965618, 0.499456290498, -0.176699685391, -0.0935536128852, -0.598267436182, -0.226057670286, 0.266128664157, -0.95697490504, -0.990835312268, -0.742806496366, 0.908590206812, -1.07481554529, -0.679755035075, -0.525581699234, 0.213587674191, 0.327852767008, 0.727286976407, 0.0658512899075, 1.89400113011, -0.215561227214, 0.870695357034, 0.433667422499, 3.44309607412, -0.347477073031, -0.767225367147, -0.773815176451, 0.195765134437, -2.15343130218, 1.88528213021, 1.68109588971, 0.268976098748, 0.341026590182, 0.571581325557, -0.913551170528, -1.69150305304, -0.0208052659192, -0.942782630622, 0.282719033389, 0.517410922991, -0.735110459456, -1.39785145266, 0.631429527154, -0.499296151102, -0.138511394341], dtype=np.float32).reshape(200,1)
x=torch.tensor(x)
T=200
T=torch.tensor(T)
def model(y,x,T):
    alpha = pyro.sample('alpha'.format(''), dist.Cauchy(torch.tensor(0.0)*torch.ones([amb(1)]),torch.tensor(5.0)*torch.ones([amb(1)])))
    beta = pyro.sample('beta'.format(''), dist.Cauchy(torch.tensor(0.0)*torch.ones([amb(1)]),torch.tensor(5.0)*torch.ones([amb(1)])))
    lambdax = pyro.sample('lambdax'.format(''), dist.Uniform(torch.tensor(0.0)*torch.ones([amb(1)]),torch.tensor(1.0)*torch.ones([amb(1)])))
    sigma = pyro.sample('sigma'.format(''), dist.Cauchy(torch.tensor(0.0)*torch.ones([amb(1)]),torch.tensor(5.0)*torch.ones([amb(1)])))
    for t in range(2, T+1):
        pyro.sample('obs_{0}_100'.format(t), dist.Normal(alpha+beta*x[t-1]+lambdax*y[t-1-1],sigma), obs=y[t-1])
    
def guide(y,x,T):
    arg_1 = pyro.param('arg_1', torch.ones((amb(1))), constraint=constraints.positive)
    arg_2 = pyro.param('arg_2', torch.ones((amb(1))), constraint=constraints.positive)
    alpha = pyro.sample('alpha'.format(''), dist.Weibull(arg_1,arg_2))
    arg_3 = pyro.param('arg_3', torch.ones((amb(1))), constraint=constraints.positive)
    arg_4 = pyro.param('arg_4', torch.ones((amb(1))), constraint=constraints.positive)
    beta = pyro.sample('beta'.format(''), dist.Beta(arg_3,arg_4))
    arg_5 = pyro.param('arg_5', torch.ones((amb(1))))
    arg_6 = pyro.param('arg_6', torch.ones((amb(1))))
    lambdax = pyro.sample('lambdax'.format(''), dist.Uniform(arg_5,arg_6))
    arg_7 = pyro.param('arg_7', torch.ones((amb(1))), constraint=constraints.positive)
    arg_8 = pyro.param('arg_8', torch.ones((amb(1))), constraint=constraints.positive)
    sigma = pyro.sample('sigma'.format(''), dist.Gamma(arg_7,arg_8))
    for t in range(2, T+1):
        pass
    
    pass
    return { "alpha": alpha,"beta": beta,"lambdax": lambdax,"sigma": sigma, }
optim = Adam({'lr': 0.05})
svi = SVI(model, guide, optim, loss=Trace_ELBO() if pyro.__version__ > '0.1.2' else 'ELBO')
for i in range(4000):
    loss = svi.step(y,x,T)
    if ((i % 1000) == 0):
        print(loss)
for name in pyro.get_param_store().get_all_param_names():
    print(('{0} : {1}'.format(name, pyro.param(name).data.numpy())))
print('alpha_mean', np.array2string(dist.Weibull(pyro.param('arg_1'), pyro.param('arg_2')).mean.detach().numpy(), separator=','))
print('beta_mean', np.array2string(dist.Beta(pyro.param('arg_3'), pyro.param('arg_4')).mean.detach().numpy(), separator=','))
print('sigma_mean', np.array2string(dist.Gamma(pyro.param('arg_7'), pyro.param('arg_8')).mean.detach().numpy(), separator=','))
print('lambdax_mean', np.array2string(dist.Uniform(pyro.param('arg_5'), pyro.param('arg_6')).mean.detach().numpy(), separator=','))
np.set_printoptions(threshold=np.inf)
with open('samples','w') as samplefile:
    samplefile.write('alpha:')
    samplefile.write(np.array2string(np.array([guide(y,x,T)['alpha'].data.numpy() for _ in range(1000)]), separator=',').replace('\n',''))
    samplefile.write('\n')
    samplefile.write('beta:')
    samplefile.write(np.array2string(np.array([guide(y,x,T)['beta'].data.numpy() for _ in range(1000)]), separator=',').replace('\n',''))
    samplefile.write('\n')
    samplefile.write('lambdax:')
    samplefile.write(np.array2string(np.array([guide(y,x,T)['lambdax'].data.numpy() for _ in range(1000)]), separator=',').replace('\n',''))
    samplefile.write('\n')
    samplefile.write('sigma:')
    samplefile.write(np.array2string(np.array([guide(y,x,T)['sigma'].data.numpy() for _ in range(1000)]), separator=',').replace('\n',''))
    samplefile.write('\n')
