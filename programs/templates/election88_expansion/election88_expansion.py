import pyro, numpy as np, torch, pyro.distributions   as dist, torch.nn as nn
from pyro.optim import Adam
import torch.distributions.constraints as constraints
from pyro.infer import SVI
if pyro.__version__ > '0.1.2': from pyro.infer import Trace_ELBO
from pyro.contrib.autoguide import *
import math
def amb(x):
    return x.data.numpy().tolist() if isinstance(x, torch.Tensor) else x
v_prev= np.array([0.5173333, 0.661, 0.6463333, 0.4883333, 0.562, 0.613, 0.564, 0.5283334, 0.153, 0.5696666, 0.4513333, 0.511, 0.6916667, 0.5336667, 0.5863333, 0.5226667, 0.6146666, 0.5243334, 0.538, 0.5446666, 0.494, 0.478, 0.5546667, 0.4713334, 0.5403333, 0.5293334, 0.596, 0.6773334, 0.6316667, 0.639, 0.5633333, 0.5713333, 0.511, 0.525, 0.6323333, 0.5493333, 0.6086667, 0.5393333, 0.5213333, 0.467, 0.5253333, 0.5986667, 0.5063334, 0.5613334, 0.727, 0.561, 0.567, 0.5523333, 0.4836667, 0.521, 0.6676667], dtype=np.float32).reshape(51,1)
v_prev=torch.tensor(v_prev)
n_age=4
n_age=torch.tensor(n_age)
n_age_edu=16
n_age_edu=torch.tensor(n_age_edu)
age= np.array([2, 4, 1, 2, 4, 2, 4, 3, 3, 2, 4, 2, 2, 2, 4, 4, 1, 2, 4, 1, 3, 2, 2, 3, 1, 3, 4, 2, 3, 4, 2, 2, 1, 2, 4, 3, 3, 3, 2, 3, 1, 1, 2, 1, 2, 3, 2, 2, 3, 1, 3, 2, 1, 2, 2, 2, 1, 2, 4, 4, 2, 2, 2, 2, 2, 3, 1, 1, 2, 3, 1, 1, 2, 2, 3, 2, 3, 2, 2, 4, 1, 3, 3, 1, 1, 1, 4, 1, 1, 1, 3, 3, 1, 2, 2, 2, 3, 4, 2, 3, 4, 1, 1, 2, 2, 2, 1, 3, 3, 2, 3, 1, 4, 1, 2, 1, 4, 1, 3, 2, 2, 2, 2, 4, 1, 3, 2, 2, 4, 2, 2, 3, 4, 4, 2, 2, 4, 3, 2, 3, 1, 1, 4, 1, 1, 3, 1, 3, 1, 4, 2, 3, 2, 2, 2, 1, 2, 1, 3, 2, 1, 1, 3, 1, 1, 2, 1, 3, 2, 2, 3, 3, 1, 3, 2, 3, 4, 3, 2, 3, 4, 2, 1, 3, 2, 3, 1, 2, 2, 3, 2, 2, 4, 3, 4, 4, 2, 3, 3, 1, 3, 2, 2, 2, 2, 1, 2, 2, 3, 4, 2, 1, 1, 2, 1, 1, 3, 2, 3, 1, 2, 2, 1, 3, 3, 2, 2, 1, 2, 3, 1, 2, 4, 3, 1, 2, 1, 4, 3, 1, 1, 2, 2, 3, 3, 2, 3, 2, 2, 1, 1, 1, 3, 2, 2, 3, 1, 1, 1, 3, 3, 2, 2, 1, 1, 1, 3, 2, 1, 4, 3, 2, 1, 2, 3, 3, 1, 3, 1, 2, 1, 3, 2, 1, 2, 3, 4, 2, 3, 2, 3, 1, 4, 4, 1, 2, 4, 1, 2, 3, 3, 2, 2, 1, 2, 2, 1, 1, 1, 1, 3, 3, 1, 2, 2, 4, 4, 2, 1, 2, 1, 4, 4, 2, 4, 2, 3, 2, 2, 3, 1, 4, 2, 2, 3, 3, 2, 2, 1, 3, 2, 2, 3, 3, 3, 3, 2, 3, 2, 4, 2, 2, 2, 1, 2, 3, 2, 2, 1, 1, 1, 2, 2, 3, 1, 1, 3, 3, 3, 3, 1, 1, 2, 3, 1, 2, 2, 4, 2, 3, 2, 1, 1, 3, 2, 2, 2, 2, 2, 4, 1, 3, 2, 1, 1, 3, 4, 2, 2, 4, 3, 4, 1, 2, 3, 3, 2, 3, 4, 2, 4, 2, 3, 1, 1, 1, 4, 2, 2, 4, 3, 1, 3, 1, 2, 2, 1, 3, 2, 4, 2, 3, 2, 2, 2, 4, 1, 1, 1, 1, 2, 2, 2, 3, 4, 2, 1, 2, 1, 1, 3, 2, 2, 1, 4, 3, 1, 3, 2, 2, 2, 1, 2, 2, 2, 1, 3, 3, 3, 2, 1, 2, 4, 2, 2, 1, 2, 3, 1, 1, 2, 2, 1, 2, 1, 2, 3, 2, 2, 1, 2, 1, 2, 1, 4, 2, 1, 2, 2, 3, 1, 1, 1, 1, 2, 1, 2, 1, 2, 2, 3, 4, 4, 3, 3, 1, 2, 3, 3, 3, 3, 2, 2, 3, 1, 2, 1, 3, 2, 2, 4, 1, 3, 2, 2, 3, 3, 2, 2, 3, 4, 2, 3, 1, 2, 1, 2, 3, 1, 3, 2, 2, 3, 1, 2, 2, 1, 2, 4, 2, 2, 2, 4, 2, 1, 1, 1, 2, 2, 2, 2, 2, 4, 2, 3, 1, 3, 1, 2, 2, 2, 2, 1, 3, 2, 2, 2, 2, 2, 3, 3, 3, 3, 1, 1, 4, 4, 2, 3, 4, 3, 2, 3, 1, 2, 3, 4, 1, 2, 2, 2, 2, 3, 1, 1, 3, 4, 2, 2, 1, 1, 1, 4, 2, 1, 4, 2, 3, 1, 1, 4, 4, 3, 2, 4, 2, 3, 2, 3, 3, 4, 2, 3, 1, 1, 4, 4, 3, 2, 3, 4, 1, 4, 1, 3, 1, 3, 3, 2, 1, 4, 4, 3, 3, 2, 1, 3, 1, 2, 1, 2, 2, 2, 4, 2, 3, 2, 3, 3, 3, 4, 1, 1, 2, 4, 3, 2, 3, 3, 3, 2, 3, 3, 1, 2, 2, 4, 2, 4, 2, 2, 2, 2, 2, 1, 4, 2, 2, 1, 2, 3, 2, 1, 2, 1, 2, 2, 1, 3, 2, 2, 4, 3, 1, 3, 1, 3, 1, 4, 3, 3, 1, 2, 2, 1, 4, 2, 2, 1, 1, 3, 1, 1, 2, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3, 1, 3, 4, 1, 2, 1, 2, 3, 2, 3, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 4, 1, 3, 2, 3, 3, 2, 2, 4, 3, 3, 3, 3, 2, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 1, 2, 2, 1, 3, 3, 1, 2, 1, 1, 1, 1, 2, 2, 3, 2, 3, 3, 2, 3, 1, 2, 2, 2, 3, 1, 1, 2, 2, 2, 1, 1, 4, 4, 1, 2, 3, 3, 1, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 3, 1, 2, 4, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 2, 3, 1, 3, 2, 2, 2, 2, 1, 2, 2, 1, 3, 3, 4, 2, 4, 2, 1, 4, 2, 2, 1, 3, 2, 3, 2, 2, 2, 4, 2, 1, 1, 2, 2, 2, 1, 1, 4, 3, 1, 2, 3, 2, 1, 1, 2, 3, 3, 4, 3, 2, 1, 2, 4, 1, 4, 3, 3, 4, 4, 2, 2, 3, 1, 1, 2, 2, 4, 3, 2, 4, 2, 4, 1, 3, 3, 2, 4, 1, 3, 2, 3, 2, 1, 2, 4, 4, 2, 2, 2, 1, 1, 3, 3, 2, 3, 3, 3, 4, 4, 3, 3, 3, 2, 4, 2, 4, 3, 4, 2, 4, 4, 1, 4, 3, 3, 3, 2, 4, 3, 4, 2, 3, 2, 3, 4, 3, 3, 3, 1, 2, 4, 2, 3, 2, 2, 2, 2, 2, 2, 1, 3, 4, 4, 1, 2, 3, 3, 2, 2, 2, 1, 2, 4, 2, 1, 2, 2, 1, 1, 1, 1, 3, 2, 1, 2, 4, 1, 1, 3, 2, 3, 4, 2, 1, 3, 4, 2, 2, 2, 4, 2, 4, 4, 3, 3, 2, 4, 3, 1, 3, 2, 2, 4, 2, 2, 3, 4, 1, 2, 4, 3, 1, 1, 2, 3, 3, 1, 4, 4, 3, 3, 3, 2, 4, 2, 3, 3, 1, 2, 2, 2, 4, 2, 1, 2, 2, 4, 2, 2, 1, 2, 2, 3, 2, 2, 2, 1, 3, 3, 3, 3, 2, 1, 1, 4, 1, 3, 3, 1, 4, 3, 4, 4, 4, 2, 2, 3, 2, 2, 4, 3, 4, 1, 1, 2, 2, 2, 3, 4, 1, 2, 2, 3, 1, 2, 2, 4, 3, 2, 2, 2, 4, 2, 3, 1, 1, 4, 1, 1, 1, 1, 3, 4, 3, 2, 2, 3, 2, 1, 4, 2, 1, 3, 2, 1, 1, 4, 3, 1, 2, 3, 4, 1, 3, 4, 3, 4, 3, 2, 3, 4, 2, 3, 4, 2, 1, 1, 2, 4, 1, 4, 2, 1, 1, 2, 1, 3, 1, 3, 3, 2, 2, 2, 1, 2, 1, 3, 4, 2, 2, 2, 1, 3, 4, 1, 1, 2, 2, 3, 3, 1, 2, 2, 1, 4, 3, 1, 2, 2, 1, 3, 2, 2, 3, 1, 3, 1, 3, 3, 3, 1, 2, 3, 2, 2, 4, 4, 2, 3, 2, 2, 1, 3, 1, 1, 1, 4, 1, 1, 1, 2, 1, 3, 4, 2, 1, 1, 2, 3, 2, 4, 3, 2, 2, 2, 4, 3, 2, 1, 3, 3, 2, 2, 2, 1, 4, 1, 2, 2, 1, 2, 3, 2, 1, 2, 2, 2, 4, 4, 3, 2, 2, 3, 4, 3, 1, 2, 1, 2, 1, 1, 3, 1, 2, 4, 1, 2, 2, 2, 1, 1, 2, 2, 4, 4, 1, 1, 2, 3, 3, 1, 3, 2, 2, 3, 2, 1, 1, 1, 3, 2, 3, 3, 2, 4, 3, 4, 2, 2, 3, 2, 3, 2, 3, 4, 2, 3, 3, 1, 3, 2, 3, 2, 1, 3, 1, 1, 4, 2, 1, 2, 1, 1, 2, 2, 4, 2, 2, 3, 1, 2, 2, 1, 2, 1, 2, 4, 2, 2, 1, 1, 3, 2, 2, 2, 1, 3, 2, 1, 1, 2, 4, 4, 1, 1, 3, 2, 2, 2, 3, 2, 3, 1, 3, 1, 2, 3, 3, 1, 1, 4, 4, 2, 1, 2, 3, 4, 2, 3, 3, 4, 1, 3, 1, 2, 2, 2, 2, 1, 3, 2, 3, 1, 2, 2, 4, 2, 2, 1, 1, 2, 1, 1, 4, 3, 1, 2, 2, 1, 1, 3, 2, 2, 4, 4, 4, 3, 4, 1, 2, 3, 2, 2, 2, 3, 3, 1, 2, 4, 2, 1, 3, 2, 3, 1, 2, 2, 2, 2, 3, 2, 4, 3, 1, 3, 3, 4, 3, 3, 4, 4, 2, 3, 2, 2, 4, 4, 3, 4, 4, 4, 2, 2, 4, 3, 3, 2, 2, 3, 4, 2, 2, 1, 2, 4, 2, 1, 1, 2, 3, 4, 2, 2, 2, 1, 3, 4, 1, 2, 1, 3, 3, 1, 2, 3, 2, 2, 4, 4, 1, 2, 4, 2, 3, 2, 3, 2, 3, 1, 4, 4, 3, 4, 2, 1, 1, 3, 4, 4, 2, 4, 2, 4, 4, 4, 2, 2, 1, 3, 2, 2, 2, 2, 4, 2, 4, 1, 2, 3, 1, 2, 3, 2, 2, 2, 2, 1, 2, 2, 4, 1, 1, 1, 1, 1, 3, 3, 2, 2, 1, 4, 2, 2, 2, 2, 2, 1, 3, 3, 1, 2, 2, 1, 4, 1, 4, 1, 3, 2, 2, 4, 2, 4, 4, 2, 2, 1, 1, 3, 1, 1, 2, 3, 1, 3, 2, 2, 2, 2, 3, 2, 2, 2, 3, 1, 2, 1, 3, 2, 4, 2, 2, 1, 4, 2, 4, 3, 1, 1, 3, 1, 1, 4, 4, 3, 4, 4, 1, 3, 3, 1, 1, 2, 3, 2, 2, 2, 3, 3, 4, 2, 4, 2, 3, 4, 3, 4, 3, 1, 3, 2, 2, 2, 1, 2, 3, 2, 2, 2, 2, 1, 1, 2, 3, 2, 4, 1, 1, 4, 2, 2, 1, 4, 1, 1, 4, 4, 2, 2, 1, 2, 2, 3, 1, 3, 3, 4, 3, 4, 3, 4, 3, 3, 3, 2, 2, 4, 3, 4, 3, 2, 1, 1, 2, 2, 2, 1, 4, 2, 3, 2, 2, 4, 1, 1, 3, 2, 4, 1, 2, 1, 2, 2, 4, 2, 1, 3, 1, 1, 1, 1, 3, 1, 1, 3, 1, 3, 4, 3, 3, 1, 3, 1, 1, 3, 3, 2, 2, 3, 2, 1, 1, 2, 3, 1, 1, 4, 4, 1, 3, 2, 3, 2, 1, 1, 2, 1, 4, 2, 2, 2, 2, 1, 4, 2, 4, 3, 1, 2, 3, 2, 2, 2, 2, 3, 3, 1, 2, 4, 3, 3, 1, 2, 1, 3, 2, 4, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 3, 3, 2, 2, 2, 4, 2, 3, 1, 2, 2, 1, 1, 2, 2, 2, 2, 4, 2, 4, 2, 1, 1, 1, 3, 3, 2, 3, 2, 2, 4, 2, 1, 2, 3, 1, 2, 2, 3, 2, 2, 2, 2, 1, 2, 1, 4, 4, 3, 1, 2, 3, 3, 3, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 3, 3, 4, 1, 3, 2, 3, 2, 1, 2, 2, 4, 1, 1, 2, 3, 2, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 1, 1, 2, 2, 3, 3, 2, 3, 1, 2, 2, 2, 1, 3, 2, 3, 1, 3, 1, 2, 2, 4, 1, 2, 2, 3, 3, 3, 2, 3, 2, 3, 3, 1, 4, 2, 3, 2, 2, 2, 4, 2, 3, 2, 3, 3, 4, 2, 4, 1, 3, 1, 1, 1, 2, 3, 1, 2, 3], dtype=np.float32).reshape(2015,1)
age=torch.tensor(age)
edu= np.array([4, 2, 3, 2, 4, 2, 2, 4, 1, 4, 3, 4, 4, 4, 2, 1, 2, 3, 3, 2, 2, 4, 4, 4, 2, 4, 3, 1, 2, 1, 3, 4, 3, 2, 1, 2, 2, 4, 2, 4, 4, 1, 4, 3, 4, 2, 2, 4, 1, 4, 1, 3, 3, 2, 2, 3, 4, 4, 1, 1, 2, 2, 4, 3, 4, 4, 2, 3, 3, 4, 2, 2, 3, 4, 2, 4, 1, 3, 2, 2, 1, 1, 2, 4, 4, 2, 4, 2, 3, 2, 1, 3, 2, 3, 4, 4, 3, 2, 2, 4, 2, 2, 2, 2, 1, 3, 2, 4, 2, 2, 4, 3, 2, 3, 2, 1, 1, 3, 1, 1, 1, 2, 2, 1, 1, 4, 2, 2, 2, 3, 4, 4, 4, 4, 2, 4, 1, 4, 2, 4, 4, 3, 4, 3, 3, 1, 3, 3, 3, 1, 4, 2, 2, 3, 2, 2, 4, 3, 1, 4, 2, 4, 4, 3, 2, 2, 4, 2, 2, 3, 4, 2, 2, 2, 3, 3, 3, 4, 3, 3, 2, 4, 3, 3, 4, 3, 2, 3, 4, 2, 4, 3, 2, 2, 2, 3, 3, 4, 4, 3, 2, 4, 3, 4, 2, 4, 3, 4, 2, 3, 2, 1, 2, 3, 4, 2, 3, 4, 4, 4, 4, 2, 2, 4, 3, 3, 4, 2, 2, 4, 2, 2, 1, 2, 4, 4, 2, 2, 2, 4, 4, 3, 2, 2, 2, 3, 4, 3, 4, 3, 3, 3, 2, 2, 4, 2, 3, 3, 3, 2, 4, 4, 4, 3, 2, 4, 2, 3, 3, 2, 4, 4, 2, 4, 2, 1, 2, 3, 2, 3, 1, 4, 2, 4, 2, 2, 2, 2, 1, 2, 3, 3, 4, 3, 3, 3, 2, 3, 2, 3, 3, 4, 3, 2, 2, 4, 2, 2, 2, 1, 2, 3, 2, 4, 3, 2, 1, 3, 3, 2, 2, 4, 1, 3, 2, 4, 2, 1, 2, 2, 2, 2, 4, 4, 3, 1, 3, 2, 2, 4, 3, 4, 2, 2, 4, 3, 2, 2, 2, 1, 2, 3, 3, 2, 3, 2, 4, 2, 4, 2, 2, 2, 4, 2, 4, 4, 2, 4, 2, 3, 2, 1, 2, 4, 3, 3, 2, 1, 3, 2, 4, 3, 4, 4, 2, 3, 4, 4, 1, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 2, 4, 4, 2, 4, 2, 4, 4, 4, 2, 2, 3, 2, 4, 1, 1, 2, 4, 2, 4, 4, 3, 2, 4, 1, 2, 3, 2, 3, 4, 3, 2, 4, 3, 3, 3, 3, 3, 2, 3, 2, 2, 3, 2, 1, 4, 2, 4, 4, 2, 1, 3, 2, 2, 4, 2, 3, 3, 4, 2, 2, 2, 4, 2, 2, 3, 4, 3, 3, 3, 3, 4, 2, 1, 2, 2, 4, 2, 4, 2, 4, 1, 3, 2, 4, 4, 2, 4, 4, 2, 2, 2, 4, 2, 4, 3, 2, 4, 1, 4, 3, 4, 4, 2, 4, 4, 4, 4, 1, 4, 2, 2, 2, 2, 2, 3, 3, 4, 4, 4, 2, 2, 4, 1, 4, 4, 1, 2, 4, 3, 3, 4, 3, 4, 3, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 4, 4, 2, 2, 2, 4, 2, 2, 1, 3, 4, 2, 4, 4, 4, 2, 4, 1, 3, 2, 4, 3, 2, 4, 2, 4, 2, 2, 2, 2, 2, 2, 2, 1, 2, 4, 4, 2, 4, 2, 4, 2, 1, 2, 3, 3, 4, 4, 3, 2, 2, 2, 4, 3, 2, 2, 1, 4, 4, 3, 2, 4, 3, 3, 1, 2, 4, 4, 2, 2, 1, 4, 2, 2, 3, 4, 3, 2, 2, 2, 2, 2, 2, 4, 2, 4, 2, 2, 2, 2, 3, 4, 4, 3, 3, 4, 1, 3, 2, 3, 2, 2, 4, 3, 2, 4, 2, 3, 4, 3, 2, 2, 2, 4, 2, 3, 1, 2, 3, 2, 4, 4, 4, 1, 2, 1, 3, 3, 3, 1, 2, 2, 3, 1, 4, 4, 4, 2, 2, 2, 4, 1, 1, 3, 1, 4, 1, 2, 2, 4, 3, 4, 3, 4, 3, 3, 3, 2, 2, 2, 2, 4, 2, 2, 2, 2, 4, 3, 1, 4, 4, 4, 1, 4, 2, 4, 2, 4, 4, 1, 2, 3, 2, 2, 4, 2, 4, 4, 4, 2, 2, 4, 3, 3, 3, 2, 4, 4, 2, 4, 2, 2, 4, 2, 4, 1, 1, 4, 4, 1, 3, 4, 2, 2, 3, 3, 3, 2, 4, 2, 3, 2, 2, 4, 3, 4, 2, 4, 4, 3, 4, 2, 2, 2, 1, 3, 3, 2, 3, 3, 2, 1, 2, 2, 4, 4, 2, 1, 2, 3, 3, 4, 3, 2, 2, 2, 3, 3, 4, 2, 2, 2, 2, 2, 2, 2, 4, 4, 3, 2, 3, 3, 4, 2, 4, 2, 4, 3, 3, 4, 2, 3, 4, 4, 3, 2, 2, 3, 4, 3, 1, 2, 4, 3, 4, 3, 3, 3, 4, 4, 4, 2, 1, 4, 2, 3, 2, 3, 4, 2, 2, 3, 3, 2, 4, 4, 2, 2, 1, 4, 2, 1, 3, 1, 2, 2, 2, 2, 3, 1, 4, 3, 3, 3, 2, 4, 3, 2, 4, 3, 3, 2, 4, 1, 2, 4, 4, 4, 2, 2, 4, 2, 2, 2, 3, 1, 2, 3, 1, 3, 2, 3, 3, 3, 4, 4, 2, 4, 3, 4, 3, 1, 2, 4, 1, 2, 3, 2, 4, 2, 4, 4, 4, 1, 4, 1, 2, 2, 2, 3, 3, 2, 3, 1, 3, 4, 2, 2, 2, 4, 2, 1, 2, 4, 2, 2, 2, 4, 2, 4, 2, 1, 2, 4, 2, 1, 3, 3, 3, 2, 2, 4, 1, 2, 1, 3, 1, 1, 2, 1, 4, 4, 2, 4, 1, 2, 3, 4, 2, 3, 3, 3, 1, 2, 2, 2, 4, 1, 4, 2, 3, 2, 2, 3, 4, 4, 2, 3, 4, 2, 2, 4, 2, 2, 4, 4, 2, 4, 4, 2, 4, 1, 2, 4, 3, 2, 3, 3, 2, 2, 2, 3, 4, 4, 2, 2, 3, 4, 4, 2, 2, 4, 2, 1, 2, 4, 1, 2, 2, 1, 1, 2, 4, 4, 1, 4, 2, 4, 1, 3, 4, 4, 4, 2, 4, 3, 3, 2, 2, 3, 2, 4, 2, 4, 1, 4, 2, 3, 1, 2, 2, 4, 3, 4, 1, 3, 2, 4, 1, 2, 3, 2, 4, 1, 4, 1, 4, 3, 4, 2, 4, 4, 3, 4, 3, 1, 2, 2, 4, 4, 2, 3, 2, 3, 1, 1, 2, 2, 1, 2, 2, 1, 3, 1, 4, 4, 3, 4, 3, 2, 2, 3, 2, 3, 2, 4, 1, 1, 4, 4, 4, 2, 4, 2, 2, 4, 4, 2, 2, 2, 2, 3, 2, 1, 1, 2, 2, 1, 2, 4, 2, 4, 4, 3, 3, 2, 4, 4, 2, 2, 2, 2, 3, 1, 2, 4, 1, 3, 3, 2, 1, 1, 2, 2, 2, 2, 4, 2, 3, 2, 3, 4, 4, 4, 4, 3, 2, 3, 3, 2, 4, 2, 2, 3, 3, 2, 4, 4, 3, 2, 1, 4, 4, 3, 4, 4, 4, 2, 4, 1, 3, 2, 2, 2, 3, 2, 2, 4, 2, 4, 1, 1, 2, 4, 4, 2, 2, 3, 2, 3, 2, 4, 4, 4, 2, 2, 3, 2, 4, 3, 3, 4, 4, 1, 2, 4, 3, 2, 3, 1, 2, 3, 4, 2, 3, 1, 3, 4, 2, 4, 1, 1, 1, 2, 4, 2, 4, 4, 4, 2, 2, 1, 2, 4, 2, 3, 4, 3, 1, 4, 2, 2, 4, 4, 2, 4, 2, 3, 4, 2, 4, 4, 2, 3, 4, 3, 4, 4, 2, 4, 2, 2, 3, 2, 4, 2, 3, 2, 3, 2, 4, 3, 4, 4, 3, 2, 4, 2, 3, 4, 1, 2, 2, 4, 2, 1, 3, 2, 2, 2, 2, 2, 3, 2, 4, 3, 4, 4, 3, 2, 3, 4, 2, 1, 3, 2, 4, 2, 2, 4, 4, 2, 4, 2, 4, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 4, 4, 4, 2, 2, 1, 4, 4, 4, 3, 4, 4, 1, 2, 2, 4, 4, 3, 2, 3, 4, 3, 3, 2, 2, 4, 4, 2, 2, 3, 2, 3, 2, 1, 1, 3, 2, 3, 4, 4, 4, 2, 2, 4, 4, 4, 3, 2, 2, 3, 2, 3, 1, 2, 4, 2, 3, 1, 2, 1, 4, 2, 1, 4, 2, 3, 3, 2, 4, 4, 2, 1, 2, 2, 4, 2, 2, 4, 2, 2, 2, 3, 1, 2, 1, 1, 1, 2, 2, 1, 4, 1, 4, 4, 3, 2, 1, 1, 2, 4, 2, 2, 4, 3, 3, 3, 4, 4, 2, 3, 1, 2, 4, 4, 4, 3, 2, 2, 3, 4, 4, 4, 3, 1, 2, 2, 1, 2, 3, 1, 4, 1, 3, 2, 1, 3, 4, 4, 2, 3, 2, 2, 3, 4, 1, 4, 4, 3, 2, 4, 4, 4, 3, 1, 3, 1, 3, 1, 1, 2, 2, 4, 3, 2, 2, 4, 2, 2, 4, 3, 3, 2, 2, 1, 2, 4, 2, 4, 3, 2, 1, 1, 2, 3, 2, 1, 2, 2, 3, 1, 2, 4, 4, 2, 4, 2, 2, 3, 3, 1, 1, 4, 3, 3, 2, 1, 3, 4, 4, 2, 4, 3, 4, 3, 2, 3, 4, 2, 2, 4, 2, 3, 2, 3, 4, 2, 2, 4, 3, 4, 2, 1, 2, 3, 4, 2, 2, 2, 3, 2, 4, 2, 2, 3, 1, 3, 2, 2, 2, 4, 1, 3, 3, 3, 2, 2, 3, 2, 2, 2, 4, 3, 3, 2, 2, 3, 3, 2, 2, 4, 2, 2, 2, 2, 2, 3, 4, 3, 4, 3, 3, 2, 2, 2, 2, 2, 3, 4, 3, 3, 2, 3, 4, 4, 3, 4, 2, 3, 1, 2, 2, 2, 2, 3, 1, 1, 2, 3, 3, 2, 3, 2, 2, 2, 3, 2, 4, 3, 2, 2, 2, 2, 3, 2, 4, 4, 3, 2, 3, 2, 4, 2, 2, 2, 2, 2, 3, 4, 3, 3, 4, 3, 2, 3, 2, 2, 2, 3, 2, 3, 4, 3, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 2, 1, 3, 2, 2, 4, 1, 2, 3, 3, 2, 2, 2, 4, 1, 2, 2, 1, 4, 4, 4, 3, 2, 4, 2, 2, 3, 4, 1, 1, 4, 4, 2, 4, 1, 2, 1, 2, 4, 4, 2, 2, 1, 1, 1, 2, 2, 2, 4, 4, 4, 4, 2, 4, 2, 4, 3, 3, 3, 2, 4, 2, 2, 3, 3, 3, 4, 3, 4, 2, 3, 3, 1, 1, 2, 4, 3, 3, 3, 3, 2, 2, 2, 2, 3, 3, 4, 3, 2, 2, 3, 2, 3, 2, 2, 2, 3, 3, 2, 4, 3, 2, 2, 2, 1, 3, 1, 3, 3, 2, 3, 2, 2, 4, 3, 4, 3, 3, 2, 2, 4, 2, 2, 4, 4, 3, 3, 2, 4, 3, 2, 4, 3, 2, 1, 3, 4, 4, 3, 2, 1, 2, 1, 2, 2, 3, 3, 2, 2, 2, 1, 4, 3, 3, 2, 3, 4, 2, 2, 1, 3, 4, 2, 2, 1, 4, 2, 4, 2, 1, 2, 2, 2, 2, 3, 3, 4, 2, 2, 4, 2, 3, 4, 3, 4, 4, 2, 4, 2, 1, 3, 2, 4, 1, 4, 3, 3, 4, 4, 3, 4, 2, 3, 3, 4, 2, 4, 2, 4, 2, 2, 2, 3, 3, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 4, 2, 4, 4, 3, 4, 3, 1, 2, 1, 4, 2, 1, 2, 4, 1, 2, 3, 2, 4, 4, 2, 3, 2, 2, 3, 3, 3, 2, 3, 4, 4, 2, 2, 4, 4, 1, 2, 3, 4, 4, 2, 4, 3, 4, 3, 2, 3, 2, 3], dtype=np.float32).reshape(2015,1)
edu=torch.tensor(edu)
n_edu=4
n_edu=torch.tensor(n_edu)
N=2015
N=torch.tensor(N)
state= np.array([39, 31, 7, 33, 33, 39, 20, 33, 40, 31, 33, 33, 31, 22, 31, 39, 31, 33, 33, 7, 39, 33, 33, 22, 31, 31, 31, 22, 33, 44, 22, 39, 33, 10, 31, 4, 31, 44, 14, 41, 22, 10, 41, 39, 41, 19, 14, 47, 37, 22, 31, 11, 36, 24, 19, 7, 25, 9, 47, 17, 26, 49, 14, 18, 21, 37, 41, 11, 43, 14, 33, 25, 49, 19, 25, 44, 43, 47, 14, 19, 17, 34, 11, 44, 24, 10, 10, 14, 36, 41, 11, 44, 11, 10, 44, 14, 50, 44, 21, 21, 43, 18, 23, 26, 47, 19, 10, 34, 44, 10, 15, 25, 23, 44, 34, 34, 44, 47, 49, 18, 10, 23, 10, 24, 44, 14, 49, 10, 43, 3, 13, 44, 14, 44, 36, 25, 49, 47, 48, 10, 16, 41, 44, 36, 24, 48, 36, 14, 10, 28, 5, 24, 8, 5, 23, 28, 35, 5, 3, 10, 48, 28, 44, 23, 14, 26, 23, 18, 17, 14, 23, 5, 14, 5, 5, 14, 5, 32, 36, 5, 48, 17, 48, 48, 5, 5, 5, 32, 38, 36, 5, 50, 5, 32, 5, 48, 5, 5, 45, 45, 5, 44, 5, 22, 31, 31, 43, 10, 5, 36, 5, 33, 36, 5, 14, 41, 48, 5, 23, 33, 50, 36, 36, 33, 47, 40, 14, 36, 5, 22, 5, 38, 40, 3, 50, 45, 24, 36, 16, 20, 44, 32, 50, 3, 23, 24, 22, 6, 31, 47, 24, 21, 49, 23, 6, 31, 48, 17, 37, 36, 36, 5, 33, 43, 19, 26, 43, 19, 31, 10, 39, 43, 22, 23, 11, 14, 41, 34, 14, 49, 10, 23, 22, 50, 33, 43, 4, 36, 11, 23, 10, 22, 39, 22, 37, 14, 14, 24, 39, 23, 10, 11, 23, 39, 11, 22, 47, 22, 33, 14, 26, 28, 23, 31, 42, 31, 44, 34, 11, 14, 33, 43, 15, 15, 31, 22, 26, 1, 49, 14, 33, 33, 31, 47, 36, 33, 33, 30, 22, 44, 25, 33, 23, 23, 41, 24, 40, 44, 22, 24, 46, 31, 33, 44, 36, 34, 41, 19, 31, 19, 47, 31, 40, 41, 10, 14, 22, 31, 10, 44, 39, 49, 11, 33, 10, 11, 34, 34, 26, 23, 33, 21, 47, 11, 47, 17, 22, 33, 10, 44, 33, 25, 23, 19, 21, 49, 41, 49, 33, 39, 11, 39, 10, 10, 21, 44, 44, 33, 44, 18, 44, 43, 33, 44, 34, 31, 5, 34, 31, 14, 18, 22, 43, 6, 14, 31, 39, 10, 34, 10, 39, 15, 22, 44, 14, 10, 44, 47, 18, 44, 40, 37, 36, 18, 39, 33, 43, 24, 10, 36, 14, 10, 10, 11, 10, 33, 39, 17, 26, 47, 10, 50, 11, 18, 50, 33, 28, 43, 24, 19, 31, 33, 26, 23, 14, 43, 44, 18, 4, 14, 26, 1, 45, 17, 44, 25, 3, 44, 5, 43, 25, 3, 50, 44, 43, 50, 5, 6, 5, 5, 5, 5, 48, 48, 51, 5, 32, 5, 5, 5, 5, 5, 5, 48, 38, 48, 33, 33, 39, 39, 33, 22, 33, 33, 33, 33, 33, 33, 33, 39, 7, 40, 33, 22, 33, 31, 50, 33, 23, 31, 39, 33, 15, 26, 33, 31, 39, 36, 36, 36, 40, 33, 39, 39, 50, 50, 36, 7, 17, 36, 50, 36, 22, 33, 50, 14, 23, 40, 17, 36, 22, 17, 39, 26, 19, 14, 36, 50, 14, 24, 50, 33, 24, 23, 15, 28, 36, 47, 33, 10, 43, 50, 36, 36, 39, 10, 47, 36, 26, 47, 18, 34, 33, 23, 14, 16, 25, 10, 4, 44, 49, 44, 49, 28, 33, 33, 10, 44, 24, 26, 11, 19, 9, 10, 50, 44, 44, 44, 39, 44, 47, 34, 44, 14, 34, 43, 50, 18, 34, 28, 44, 1, 47, 47, 10, 1, 18, 5, 44, 6, 4, 5, 44, 6, 10, 44, 3, 5, 11, 1, 10, 34, 32, 32, 5, 11, 38, 37, 24, 41, 32, 5, 5, 49, 50, 48, 1, 25, 43, 5, 48, 5, 5, 11, 3, 5, 5, 37, 29, 18, 6, 5, 16, 47, 44, 7, 5, 21, 44, 33, 38, 5, 10, 44, 3, 39, 5, 36, 33, 23, 34, 38, 15, 34, 23, 39, 33, 36, 37, 33, 48, 23, 34, 23, 14, 7, 39, 23, 44, 11, 10, 10, 17, 21, 17, 23, 14, 25, 8, 10, 10, 5, 33, 22, 10, 19, 3, 47, 38, 18, 41, 50, 32, 47, 25, 13, 23, 36, 44, 33, 22, 11, 48, 15, 6, 36, 11, 5, 44, 5, 14, 33, 5, 47, 6, 36, 44, 10, 33, 49, 39, 37, 43, 24, 19, 18, 26, 24, 33, 39, 33, 34, 47, 33, 3, 11, 5, 41, 43, 33, 22, 31, 43, 10, 43, 11, 6, 33, 19, 30, 41, 36, 39, 20, 34, 14, 6, 14, 48, 5, 43, 11, 23, 31, 22, 5, 5, 10, 44, 39, 33, 41, 23, 47, 39, 18, 39, 33, 41, 47, 5, 3, 35, 33, 18, 5, 10, 10, 1, 36, 44, 44, 38, 33, 5, 44, 48, 41, 33, 16, 5, 44, 10, 39, 10, 33, 10, 1, 41, 31, 43, 43, 36, 33, 15, 44, 36, 10, 40, 43, 5, 5, 1, 40, 10, 14, 48, 39, 31, 49, 44, 11, 36, 14, 10, 5, 33, 14, 22, 33, 7, 23, 11, 33, 36, 22, 14, 23, 11, 44, 36, 31, 36, 33, 33, 5, 21, 31, 23, 20, 44, 38, 7, 6, 5, 1, 5, 44, 39, 31, 22, 31, 16, 10, 6, 37, 14, 5, 48, 37, 36, 21, 5, 5, 21, 5, 44, 38, 14, 10, 5, 10, 22, 22, 39, 34, 33, 39, 10, 33, 44, 25, 5, 48, 10, 36, 40, 3, 3, 36, 5, 34, 10, 19, 5, 24, 28, 1, 43, 38, 5, 5, 39, 33, 44, 34, 10, 47, 47, 5, 44, 19, 18, 36, 36, 18, 36, 10, 17, 39, 39, 11, 48, 48, 13, 5, 23, 36, 10, 33, 50, 43, 23, 36, 11, 50, 24, 22, 14, 17, 33, 15, 35, 19, 33, 5, 50, 5, 10, 14, 26, 36, 14, 49, 31, 39, 44, 21, 10, 1, 10, 47, 10, 43, 11, 10, 1, 33, 10, 21, 1, 44, 21, 47, 34, 33, 47, 39, 18, 47, 44, 41, 47, 26, 10, 44, 10, 43, 49, 47, 41, 18, 10, 42, 22, 47, 21, 7, 41, 10, 21, 31, 11, 17, 34, 11, 44, 41, 21, 26, 33, 31, 33, 4, 33, 50, 31, 16, 10, 48, 33, 31, 33, 25, 4, 33, 24, 36, 47, 7, 33, 33, 10, 50, 49, 37, 33, 39, 47, 33, 33, 44, 5, 36, 39, 44, 24, 10, 41, 33, 33, 21, 33, 50, 36, 33, 16, 39, 47, 44, 22, 26, 22, 10, 49, 50, 35, 22, 11, 36, 31, 1, 36, 36, 24, 50, 31, 10, 31, 14, 23, 28, 22, 22, 23, 23, 14, 28, 44, 7, 33, 37, 15, 36, 19, 16, 33, 5, 5, 48, 36, 5, 41, 23, 45, 44, 36, 3, 5, 5, 3, 32, 14, 1, 45, 50, 26, 47, 9, 5, 33, 44, 3, 23, 28, 26, 3, 5, 47, 24, 23, 5, 5, 16, 48, 36, 39, 48, 10, 33, 10, 10, 23, 1, 27, 15, 23, 36, 15, 6, 5, 39, 33, 45, 5, 5, 6, 14, 50, 36, 5, 33, 25, 5, 6, 8, 43, 31, 22, 33, 24, 21, 5, 41, 48, 10, 5, 49, 5, 44, 5, 44, 11, 39, 33, 15, 24, 24, 20, 44, 33, 32, 5, 33, 44, 23, 33, 38, 5, 17, 19, 34, 16, 1, 37, 39, 31, 16, 36, 39, 19, 18, 41, 39, 23, 7, 48, 34, 33, 4, 7, 33, 14, 10, 44, 48, 14, 5, 13, 43, 39, 32, 47, 36, 33, 30, 18, 33, 26, 5, 5, 22, 20, 23, 14, 14, 47, 36, 36, 25, 44, 14, 39, 33, 38, 16, 48, 50, 39, 33, 50, 34, 23, 26, 6, 15, 14, 31, 10, 11, 36, 33, 26, 36, 5, 10, 3, 42, 10, 15, 41, 28, 22, 3, 36, 21, 43, 39, 8, 5, 16, 24, 34, 36, 10, 24, 48, 5, 24, 6, 33, 10, 3, 5, 35, 15, 5, 5, 27, 49, 26, 5, 48, 28, 5, 5, 17, 48, 14, 48, 33, 28, 5, 5, 48, 5, 5, 42, 5, 5, 48, 50, 5, 5, 32, 5, 48, 5, 32, 3, 32, 11, 1, 44, 1, 15, 15, 34, 48, 39, 17, 36, 14, 15, 44, 10, 5, 31, 36, 14, 33, 19, 36, 10, 7, 43, 44, 32, 44, 44, 11, 5, 10, 5, 5, 5, 23, 21, 23, 5, 14, 34, 31, 31, 5, 17, 5, 39, 10, 1, 22, 33, 28, 39, 7, 1, 43, 36, 35, 3, 10, 48, 33, 48, 14, 15, 44, 39, 15, 44, 19, 33, 5, 44, 44, 23, 5, 5, 25, 33, 5, 44, 25, 10, 25, 44, 38, 50, 5, 36, 15, 48, 10, 49, 5, 3, 34, 50, 44, 14, 25, 5, 47, 39, 39, 34, 44, 44, 20, 32, 44, 48, 47, 47, 11, 44, 4, 20, 33, 39, 39, 31, 20, 33, 31, 33, 33, 39, 33, 39, 33, 39, 31, 39, 31, 22, 7, 33, 10, 33, 33, 39, 33, 39, 46, 33, 33, 17, 33, 39, 18, 31, 31, 7, 39, 39, 33, 33, 10, 36, 31, 39, 24, 7, 24, 39, 47, 14, 23, 42, 24, 23, 50, 39, 36, 23, 39, 7, 34, 33, 23, 23, 24, 10, 14, 44, 36, 31, 14, 14, 34, 34, 36, 50, 39, 24, 23, 26, 50, 11, 17, 26, 36, 23, 14, 15, 10, 7, 23, 50, 36, 11, 50, 10, 1, 14, 1, 10, 37, 44, 16, 26, 8, 21, 23, 14, 36, 34, 33, 36, 26, 44, 36, 10, 10, 10, 14, 50, 18, 34, 14, 50, 33, 39, 47, 25, 10, 11, 19, 44, 21, 50, 44, 43, 23, 23, 44, 10, 44, 15, 10, 26, 15, 10, 44, 44, 11, 23, 34, 43, 44, 43, 23, 18, 33, 23, 36, 25, 49, 19, 35, 4, 36, 36, 19, 39, 44, 43, 23, 19, 23, 25, 43, 47, 24, 23, 44, 21, 19, 27, 44, 47, 5, 10, 44, 16, 23, 5, 48, 10, 7, 5, 10, 5, 44, 24, 17, 14, 48, 6, 45, 10, 18, 36, 5, 48, 23, 17, 6, 5, 24, 3, 16, 8, 5, 10, 21, 32, 5, 44, 5, 10, 32, 5, 49, 15, 50, 5, 11, 1, 50, 36, 48, 3, 32, 33, 10, 48, 38, 6, 18, 39, 38, 33, 32, 5, 33, 4, 15, 23, 5, 24, 23, 39, 50, 26, 23, 8, 29, 44, 18, 44, 16, 15, 50, 33, 47, 36, 33, 47, 44, 6, 31, 14, 5, 31, 47, 44, 3, 5, 11, 5, 38, 26, 36, 6, 5, 31, 10, 31, 33, 5, 23, 33, 20, 15, 26, 5, 48, 11, 43, 33, 7, 20, 39, 49, 29, 39, 5, 3, 16, 48, 5, 22, 7, 41, 10, 7, 10, 36, 33, 39, 31, 50, 26, 23, 31, 49, 26, 44, 50, 20, 47, 5, 10, 5, 39, 23, 50, 22, 14, 20, 47, 44, 1, 11, 5, 23, 43, 39, 44, 47, 34, 23, 47, 15, 33, 39, 32, 5, 33, 19, 37, 11, 23, 18, 10, 5, 5, 49, 23, 45, 48, 15, 42, 39, 21, 10, 10, 19, 7, 39, 33, 36, 37, 17, 17, 33, 37, 3, 10, 21, 34, 14, 15, 22, 28, 36, 21, 1, 39, 44, 34, 21, 6, 21, 17, 39, 14, 36, 36, 5, 14, 36, 5, 24, 25, 44, 14, 14, 3, 15, 5, 1, 1, 44, 25, 16, 14, 27, 25, 48, 50, 4, 14, 26, 19, 26, 1, 25, 43, 44, 50, 3, 24, 44, 1, 14, 5, 5, 45, 51, 5, 45, 48, 5, 3, 27, 5, 38, 5, 5, 5, 5, 5, 5, 32, 5, 6, 29, 5, 3, 5, 5, 5], dtype=np.float32).reshape(2015,1)
state=torch.tensor(state)
black= np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], dtype=np.float32).reshape(2015,1)
black=torch.tensor(black)
n_region=5
n_region=torch.tensor(n_region)
female= np.array([1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0], dtype=np.float32).reshape(2015,1)
female=torch.tensor(female)
n_state=51
n_state=torch.tensor(n_state)
y= np.array([1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0], dtype=np.float32).reshape(2015,1)
y=torch.tensor(y)
age_edu= np.array([8, 14, 3, 6, 16, 6, 14, 12, 9, 8, 15, 8, 8, 8, 14, 13, 2, 7, 15, 2, 10, 8, 8, 12, 2, 12, 15, 5, 10, 13, 7, 8, 3, 6, 13, 10, 10, 12, 6, 12, 4, 1, 8, 3, 8, 10, 6, 8, 9, 4, 9, 7, 3, 6, 6, 7, 4, 8, 13, 13, 6, 6, 8, 7, 8, 12, 2, 3, 7, 12, 2, 2, 7, 8, 10, 8, 9, 7, 6, 14, 1, 9, 10, 4, 4, 2, 16, 2, 3, 2, 9, 11, 2, 7, 8, 8, 11, 14, 6, 12, 14, 2, 2, 6, 5, 7, 2, 12, 10, 6, 12, 3, 14, 3, 6, 1, 13, 3, 9, 5, 5, 6, 6, 13, 1, 12, 6, 6, 14, 7, 8, 12, 16, 16, 6, 8, 13, 12, 6, 12, 4, 3, 16, 3, 3, 9, 3, 11, 3, 13, 8, 10, 6, 7, 6, 2, 8, 3, 9, 8, 2, 4, 12, 3, 2, 6, 4, 10, 6, 7, 12, 10, 2, 10, 7, 11, 15, 12, 7, 11, 14, 8, 3, 11, 8, 11, 2, 7, 8, 10, 8, 7, 14, 10, 14, 15, 7, 12, 12, 3, 10, 8, 7, 8, 6, 4, 7, 8, 10, 15, 6, 1, 2, 7, 4, 2, 11, 8, 12, 4, 8, 6, 2, 12, 11, 7, 8, 2, 6, 12, 2, 6, 13, 10, 4, 8, 2, 14, 10, 4, 4, 7, 6, 10, 10, 7, 12, 7, 8, 3, 3, 3, 10, 6, 8, 10, 3, 3, 3, 10, 12, 8, 8, 3, 2, 4, 10, 7, 3, 14, 12, 8, 2, 8, 10, 9, 2, 11, 2, 7, 1, 12, 6, 4, 6, 10, 14, 6, 9, 6, 11, 3, 16, 15, 3, 7, 14, 3, 6, 11, 11, 8, 7, 2, 6, 8, 2, 2, 2, 1, 10, 11, 2, 8, 7, 14, 13, 7, 3, 6, 2, 16, 13, 7, 14, 8, 10, 5, 6, 10, 2, 14, 8, 8, 11, 9, 7, 6, 2, 12, 7, 8, 10, 10, 12, 11, 6, 10, 6, 13, 6, 7, 7, 2, 7, 10, 8, 6, 4, 2, 2, 6, 8, 10, 4, 4, 10, 12, 10, 11, 2, 1, 6, 12, 3, 7, 6, 13, 7, 10, 8, 3, 4, 12, 6, 7, 8, 8, 5, 14, 4, 10, 6, 2, 2, 10, 14, 6, 8, 16, 10, 14, 2, 6, 10, 12, 8, 10, 16, 6, 16, 8, 12, 2, 2, 3, 14, 8, 5, 13, 10, 4, 10, 4, 8, 7, 2, 12, 5, 14, 7, 10, 7, 8, 7, 14, 4, 3, 3, 3, 7, 7, 6, 11, 14, 6, 3, 6, 1, 4, 10, 8, 8, 2, 13, 11, 2, 10, 8, 6, 7, 3, 8, 6, 6, 2, 12, 10, 10, 7, 4, 7, 15, 7, 7, 4, 6, 9, 2, 2, 8, 6, 4, 6, 4, 5, 11, 6, 8, 4, 6, 4, 8, 2, 14, 6, 4, 6, 8, 11, 2, 4, 1, 4, 7, 4, 8, 2, 8, 8, 12, 16, 13, 12, 10, 2, 6, 10, 10, 11, 11, 8, 8, 12, 2, 6, 4, 9, 8, 8, 13, 2, 12, 7, 7, 12, 11, 8, 7, 10, 14, 7, 10, 2, 7, 2, 6, 10, 3, 10, 8, 8, 10, 2, 6, 8, 2, 6, 13, 7, 8, 6, 16, 8, 4, 2, 4, 5, 7, 6, 8, 7, 14, 8, 10, 4, 10, 2, 6, 6, 6, 6, 2, 9, 6, 8, 8, 6, 8, 10, 12, 10, 9, 2, 3, 15, 16, 8, 11, 14, 10, 6, 12, 3, 6, 10, 13, 4, 8, 7, 6, 8, 11, 3, 1, 10, 16, 8, 6, 2, 1, 4, 14, 6, 3, 16, 7, 10, 2, 2, 14, 14, 10, 8, 14, 8, 10, 6, 10, 10, 15, 8, 12, 3, 3, 16, 13, 11, 6, 11, 14, 2, 16, 3, 10, 4, 10, 11, 8, 3, 14, 14, 10, 12, 6, 3, 9, 2, 7, 2, 8, 8, 8, 13, 6, 9, 7, 11, 11, 9, 14, 2, 3, 5, 16, 12, 8, 10, 10, 10, 8, 9, 9, 3, 5, 8, 13, 6, 14, 8, 7, 8, 7, 8, 3, 15, 7, 6, 2, 6, 10, 8, 2, 6, 2, 6, 8, 3, 9, 8, 8, 16, 9, 4, 10, 4, 10, 4, 16, 9, 10, 3, 6, 6, 4, 14, 8, 8, 4, 2, 10, 4, 3, 7, 7, 10, 4, 8, 6, 8, 10, 10, 12, 10, 4, 9, 13, 4, 8, 1, 7, 12, 6, 10, 3, 7, 7, 2, 8, 6, 7, 6, 6, 4, 15, 4, 10, 8, 12, 11, 8, 6, 14, 10, 9, 11, 11, 6, 11, 3, 6, 9, 2, 2, 8, 4, 6, 9, 2, 7, 7, 4, 11, 10, 2, 6, 3, 3, 4, 2, 6, 6, 10, 6, 10, 10, 8, 12, 3, 6, 7, 7, 12, 2, 4, 6, 8, 7, 3, 4, 14, 15, 4, 8, 11, 10, 2, 3, 8, 3, 5, 6, 8, 7, 8, 7, 7, 7, 8, 12, 8, 10, 1, 8, 14, 7, 2, 7, 8, 6, 2, 7, 3, 2, 8, 8, 10, 2, 9, 8, 6, 5, 7, 1, 6, 6, 2, 10, 11, 13, 8, 15, 7, 3, 14, 8, 7, 2, 12, 7, 11, 6, 8, 5, 14, 8, 4, 4, 6, 6, 8, 2, 2, 14, 11, 1, 6, 11, 5, 3, 2, 7, 11, 11, 16, 12, 6, 4, 7, 16, 3, 13, 10, 12, 13, 14, 7, 6, 12, 2, 4, 8, 8, 13, 12, 5, 14, 6, 14, 3, 11, 10, 7, 13, 3, 12, 6, 10, 6, 4, 6, 13, 14, 8, 6, 6, 2, 4, 10, 12, 6, 9, 10, 12, 14, 13, 11, 11, 11, 6, 14, 8, 13, 10, 13, 7, 13, 13, 2, 13, 12, 12, 10, 8, 13, 10, 15, 8, 10, 7, 11, 15, 9, 10, 10, 2, 8, 13, 8, 10, 7, 6, 6, 7, 8, 8, 2, 11, 16, 14, 2, 8, 10, 10, 8, 8, 6, 4, 8, 14, 8, 1, 6, 8, 3, 2, 3, 3, 10, 6, 2, 7, 16, 4, 2, 10, 7, 12, 16, 6, 2, 12, 14, 5, 6, 8, 13, 6, 14, 13, 9, 10, 8, 16, 9, 4, 10, 8, 5, 15, 8, 8, 12, 14, 4, 7, 15, 10, 2, 3, 6, 12, 10, 4, 13, 16, 10, 11, 9, 6, 14, 8, 11, 12, 1, 7, 6, 8, 13, 6, 3, 6, 8, 13, 8, 5, 4, 7, 8, 10, 8, 8, 7, 4, 11, 9, 10, 10, 8, 4, 2, 15, 2, 11, 9, 1, 14, 10, 13, 14, 14, 5, 7, 9, 8, 8, 15, 12, 15, 2, 2, 7, 6, 7, 10, 16, 1, 5, 8, 12, 4, 6, 8, 14, 10, 8, 8, 6, 14, 6, 10, 3, 2, 13, 1, 2, 2, 1, 10, 16, 10, 8, 8, 11, 7, 2, 16, 8, 2, 10, 6, 2, 3, 13, 10, 4, 5, 11, 15, 2, 9, 13, 10, 14, 10, 6, 12, 14, 7, 10, 15, 8, 4, 4, 8, 15, 2, 15, 7, 2, 4, 6, 2, 11, 3, 10, 12, 8, 7, 6, 1, 8, 4, 11, 16, 8, 8, 6, 4, 9, 15, 2, 2, 6, 7, 10, 10, 4, 6, 8, 1, 13, 10, 4, 8, 6, 2, 11, 6, 7, 10, 4, 12, 4, 10, 10, 11, 2, 8, 11, 7, 8, 16, 13, 6, 12, 7, 6, 3, 9, 2, 3, 4, 14, 3, 1, 3, 8, 2, 12, 13, 5, 1, 2, 8, 10, 8, 16, 12, 6, 6, 5, 14, 12, 6, 3, 12, 11, 5, 8, 6, 2, 16, 4, 6, 8, 2, 7, 12, 6, 4, 8, 6, 7, 16, 15, 12, 8, 6, 12, 14, 10, 3, 6, 4, 6, 3, 2, 11, 2, 8, 15, 4, 8, 7, 6, 4, 2, 7, 8, 13, 14, 2, 4, 6, 9, 11, 2, 10, 6, 6, 10, 7, 2, 4, 3, 12, 8, 11, 10, 7, 16, 10, 13, 7, 6, 12, 6, 10, 8, 12, 14, 8, 10, 12, 2, 10, 6, 11, 6, 2, 10, 3, 2, 14, 8, 4, 8, 2, 2, 5, 8, 16, 8, 7, 12, 4, 5, 6, 2, 8, 4, 7, 14, 7, 8, 3, 3, 10, 6, 8, 8, 2, 10, 7, 2, 3, 6, 13, 13, 3, 2, 11, 8, 8, 8, 10, 6, 12, 4, 12, 3, 6, 10, 11, 2, 3, 13, 14, 8, 2, 7, 9, 14, 5, 12, 10, 13, 4, 10, 3, 7, 6, 8, 8, 2, 9, 6, 10, 4, 6, 6, 16, 6, 6, 2, 3, 5, 2, 1, 13, 9, 2, 6, 5, 4, 1, 12, 8, 7, 14, 13, 13, 10, 16, 2, 6, 12, 7, 7, 7, 12, 12, 2, 7, 13, 6, 4, 12, 8, 11, 2, 6, 7, 8, 8, 12, 7, 13, 10, 2, 9, 10, 15, 9, 12, 13, 15, 6, 9, 7, 8, 16, 14, 11, 14, 14, 15, 8, 5, 16, 12, 11, 6, 8, 12, 16, 7, 5, 3, 5, 15, 5, 1, 2, 6, 12, 15, 6, 6, 8, 2, 10, 16, 3, 7, 2, 10, 9, 2, 8, 10, 8, 7, 14, 13, 1, 6, 15, 6, 9, 6, 10, 7, 9, 2, 16, 16, 10, 16, 6, 2, 3, 11, 13, 13, 8, 15, 7, 14, 13, 15, 8, 8, 2, 12, 7, 8, 7, 6, 15, 8, 14, 2, 8, 10, 3, 6, 11, 8, 6, 6, 8, 3, 8, 6, 13, 2, 3, 4, 2, 2, 10, 11, 6, 8, 2, 14, 7, 5, 7, 6, 6, 2, 12, 9, 3, 7, 7, 2, 14, 3, 14, 2, 10, 8, 7, 15, 6, 14, 15, 7, 6, 2, 4, 10, 2, 2, 6, 10, 3, 12, 7, 8, 7, 7, 10, 6, 6, 6, 10, 3, 8, 3, 11, 6, 15, 8, 8, 3, 16, 6, 15, 9, 2, 2, 10, 2, 3, 13, 13, 10, 15, 15, 2, 11, 10, 2, 2, 7, 10, 8, 7, 6, 10, 10, 14, 7, 14, 8, 12, 15, 10, 15, 10, 4, 10, 6, 6, 6, 2, 7, 12, 7, 7, 8, 7, 2, 3, 6, 10, 6, 15, 2, 3, 16, 7, 8, 3, 15, 2, 2, 14, 14, 6, 6, 2, 7, 7, 11, 3, 10, 9, 15, 10, 14, 12, 13, 10, 11, 11, 6, 6, 14, 12, 13, 10, 6, 1, 4, 8, 8, 7, 2, 16, 6, 10, 7, 8, 13, 1, 4, 12, 6, 16, 1, 6, 1, 6, 8, 16, 6, 2, 9, 1, 1, 2, 2, 10, 4, 4, 12, 4, 10, 16, 10, 12, 3, 11, 3, 2, 12, 10, 6, 7, 11, 7, 4, 3, 8, 10, 3, 3, 13, 13, 2, 12, 7, 11, 7, 3, 2, 6, 2, 14, 7, 7, 8, 7, 2, 14, 7, 14, 11, 2, 6, 10, 7, 7, 6, 8, 11, 10, 2, 6, 13, 11, 9, 3, 7, 2, 11, 6, 14, 4, 3, 8, 7, 7, 6, 6, 8, 6, 2, 12, 12, 7, 7, 6, 16, 7, 10, 4, 7, 6, 1, 3, 8, 8, 7, 6, 13, 6, 13, 6, 2, 3, 3, 10, 10, 6, 9, 8, 7, 15, 6, 3, 8, 10, 2, 5, 7, 12, 6, 6, 5, 8, 2, 8, 2, 13, 14, 10, 2, 6, 11, 11, 12, 6, 6, 8, 6, 7, 12, 11, 8, 8, 6, 12, 10, 13, 3, 10, 8, 9, 8, 3, 7, 8, 16, 3, 4, 6, 11, 7, 8, 6, 8, 6, 12, 2, 10, 2, 3, 3, 8, 4, 3, 7, 7, 10, 10, 6, 10, 2, 8, 6, 8, 4, 11, 8, 11, 1, 10, 1, 8, 6, 13, 2, 8, 5, 10, 11, 10, 8, 12, 6, 11, 10, 2, 15, 7, 11, 6, 7, 8, 16, 6, 10, 8, 12, 9, 14, 7, 16, 4, 10, 4, 3, 4, 7, 10, 3, 6, 11], dtype=np.float32).reshape(2015,1)
age_edu=torch.tensor(age_edu)
region= np.array([3, 4, 4, 3, 4, 4, 1, 1, 5, 3, 3, 4, 4, 2, 2, 2, 2, 3, 3, 1, 1, 1, 2, 2, 3, 2, 4, 2, 4, 1, 1, 4, 1, 3, 2, 2, 3, 4, 1, 1, 3, 2, 3, 3, 4, 1, 3, 4, 1, 2, 4], dtype=np.float32).reshape(51,1)
region=torch.tensor(region)
def model(v_prev,n_age,n_age_edu,age,edu,n_edu,N,state,black,n_region,female,n_state,y,age_edu,region):
    sigma_state_raw = pyro.sample('sigma_state_raw'.format(''), dist.Normal(torch.tensor(1234.0)*torch.ones([amb(1)]),torch.tensor(1234.0)*torch.ones([amb(1)])))
    xi_edu = pyro.sample('xi_edu'.format(''), dist.Normal(torch.tensor(1234.0)*torch.ones([amb(1)]),torch.tensor(1234.0)*torch.ones([amb(1)])))
    b_0 = pyro.sample('b_0'.format(''), dist.Normal(torch.tensor(1234.0)*torch.ones([amb(1)]),torch.tensor(1234.0)*torch.ones([amb(1)])))
    xi_state = pyro.sample('xi_state'.format(''), dist.Normal(torch.tensor(1234.0)*torch.ones([amb(1)]),torch.tensor(1234.0)*torch.ones([amb(1)])))
    b_black = pyro.sample('b_black'.format(''), dist.Normal(torch.tensor(1234.0)*torch.ones([amb(1)]),torch.tensor(1234.0)*torch.ones([amb(1)])))
    b_female_black = pyro.sample('b_female_black'.format(''), dist.Normal(torch.tensor(1234.0)*torch.ones([amb(1)]),torch.tensor(1234.0)*torch.ones([amb(1)])))
    sigma_edu_raw = pyro.sample('sigma_edu_raw'.format(''), dist.Normal(torch.tensor(1234.0)*torch.ones([amb(1)]),torch.tensor(1234.0)*torch.ones([amb(1)])))
    xi_age_edu = pyro.sample('xi_age_edu'.format(''), dist.Normal(torch.tensor(1234.0)*torch.ones([amb(1)]),torch.tensor(1234.0)*torch.ones([amb(1)])))
    b_female = pyro.sample('b_female'.format(''), dist.Normal(torch.tensor(1234.0)*torch.ones([amb(1)]),torch.tensor(1234.0)*torch.ones([amb(1)])))
    xi_age = pyro.sample('xi_age'.format(''), dist.Normal(torch.tensor(1234.0)*torch.ones([amb(1)]),torch.tensor(1234.0)*torch.ones([amb(1)])))
    sigma_age_edu_raw = pyro.sample('sigma_age_edu_raw'.format(''), dist.Normal(torch.tensor(1234.0)*torch.ones([amb(1)]),torch.tensor(1234.0)*torch.ones([amb(1)])))
    sigma_region_raw = pyro.sample('sigma_region_raw'.format(''), dist.Normal(torch.tensor(1234.0)*torch.ones([amb(1)]),torch.tensor(1234.0)*torch.ones([amb(1)])))
    sigma_age_raw = pyro.sample('sigma_age_raw'.format(''), dist.Normal(torch.tensor(1234.0)*torch.ones([amb(1)]),torch.tensor(1234.0)*torch.ones([amb(1)])))
    mu = pyro.sample('mu'.format(''), dist.Normal(torch.tensor(0.0)*torch.ones([amb(1)]),torch.tensor(100.0)*torch.ones([amb(1)])))
    mu_age_edu = pyro.sample('mu_age_edu'.format(''), dist.Normal(torch.tensor(0.0)*torch.ones([amb(1)]),torch.tensor(1.0)*torch.ones([amb(1)])))
    with pyro.iarange('b_age_raw_range_'.format('')):
        b_age_raw = pyro.sample('b_age_raw'.format(''), dist.Normal(torch.tensor(0.0)*torch.ones([amb(n_age)]),sigma_age_raw*torch.ones([amb(n_age)])))
    with pyro.iarange('b_edu_raw_range_'.format('')):
        b_edu_raw = pyro.sample('b_edu_raw'.format(''), dist.Normal(torch.tensor(0.0)*torch.ones([amb(n_edu)]),sigma_edu_raw*torch.ones([amb(n_edu)])))
    with pyro.iarange('beta_range_'.format('')):
        beta = pyro.sample('beta'.format(''), dist.Normal(torch.tensor(0.0)*torch.ones([amb(4)]),torch.tensor(100.0)*torch.ones([amb(4)])))
    b_v_prev_raw = pyro.sample('b_v_prev_raw'.format(''), dist.Normal(torch.tensor(0.0)*torch.ones([amb(1)]),torch.tensor(100.0)*torch.ones([amb(1)])))
    with pyro.iarange('b_region_raw_range_'.format('')):
        b_region_raw = pyro.sample('b_region_raw'.format(''), dist.Normal(torch.tensor(0.0)*torch.ones([amb(n_region)]),sigma_region_raw*torch.ones([amb(n_region)])))
    
def guide(v_prev,n_age,n_age_edu,age,edu,n_edu,N,state,black,n_region,female,n_state,y,age_edu,region):
    arg_1 = pyro.param('arg_1', torch.ones((amb(1))), constraint=constraints.positive)
    arg_2 = pyro.param('arg_2', torch.ones((amb(1))), constraint=constraints.positive)
    sigma_state_raw = pyro.sample('sigma_state_raw'.format(''), dist.Beta(arg_1,arg_2))
    arg_3 = pyro.param('arg_3', torch.ones((amb(1))))
    arg_4 = pyro.param('arg_4', torch.ones((amb(1))), constraint=constraints.positive)
    xi_edu = pyro.sample('xi_edu'.format(''), dist.Normal(arg_3,arg_4))
    arg_5 = pyro.param('arg_5', torch.ones((amb(1))))
    arg_6 = pyro.param('arg_6', torch.ones((amb(1))), constraint=constraints.positive)
    b_0 = pyro.sample('b_0'.format(''), dist.Normal(arg_5,arg_6))
    arg_7 = pyro.param('arg_7', torch.ones((amb(1))), constraint=constraints.positive)
    arg_8 = pyro.param('arg_8', torch.ones((amb(1))), constraint=constraints.positive)
    xi_state = pyro.sample('xi_state'.format(''), dist.Gamma(arg_7,arg_8))
    arg_9 = pyro.param('arg_9', torch.ones((amb(1))), constraint=constraints.positive)
    arg_10 = pyro.param('arg_10', torch.ones((amb(1))), constraint=constraints.positive)
    b_black = pyro.sample('b_black'.format(''), dist.Gamma(arg_9,arg_10))
    arg_11 = pyro.param('arg_11', torch.ones((amb(1))), constraint=constraints.positive)
    b_female_black = pyro.sample('b_female_black'.format(''), dist.Exponential(arg_11))
    arg_12 = pyro.param('arg_12', torch.ones((amb(1))), constraint=constraints.positive)
    arg_13 = pyro.param('arg_13', torch.ones((amb(1))), constraint=constraints.positive)
    sigma_edu_raw = pyro.sample('sigma_edu_raw'.format(''), dist.Gamma(arg_12,arg_13))
    arg_14 = pyro.param('arg_14', torch.ones((amb(1))))
    arg_15 = pyro.param('arg_15', torch.ones((amb(1))), constraint=constraints.positive)
    xi_age_edu = pyro.sample('xi_age_edu'.format(''), dist.LogNormal(arg_14,arg_15))
    arg_16 = pyro.param('arg_16', torch.ones((amb(1))))
    arg_17 = pyro.param('arg_17', torch.ones((amb(1))), constraint=constraints.positive)
    b_female = pyro.sample('b_female'.format(''), dist.LogNormal(arg_16,arg_17))
    arg_18 = pyro.param('arg_18', torch.ones((amb(1))), constraint=constraints.positive)
    arg_19 = pyro.param('arg_19', torch.ones((amb(1))), constraint=constraints.positive)
    xi_age = pyro.sample('xi_age'.format(''), dist.Pareto(arg_18,arg_19))
    arg_20 = pyro.param('arg_20', torch.ones((amb(1))), constraint=constraints.positive)
    arg_21 = pyro.param('arg_21', torch.ones((amb(1))), constraint=constraints.positive)
    sigma_age_edu_raw = pyro.sample('sigma_age_edu_raw'.format(''), dist.Gamma(arg_20,arg_21))
    arg_22 = pyro.param('arg_22', torch.ones((amb(1))), constraint=constraints.positive)
    arg_23 = pyro.param('arg_23', torch.ones((amb(1))), constraint=constraints.positive)
    sigma_region_raw = pyro.sample('sigma_region_raw'.format(''), dist.Pareto(arg_22,arg_23))
    arg_24 = pyro.param('arg_24', torch.ones((amb(1))), constraint=constraints.positive)
    arg_25 = pyro.param('arg_25', torch.ones((amb(1))), constraint=constraints.positive)
    sigma_age_raw = pyro.sample('sigma_age_raw'.format(''), dist.Weibull(arg_24,arg_25))
    arg_26 = pyro.param('arg_26', torch.ones((amb(1))), constraint=constraints.positive)
    arg_27 = pyro.param('arg_27', torch.ones((amb(1))))
    arg_28 = pyro.param('arg_28', torch.ones((amb(1))), constraint=constraints.positive)
    mu = pyro.sample('mu'.format(''), dist.StudentT(df=arg_26,loc=arg_27,scale=arg_28))
    arg_29 = pyro.param('arg_29', torch.ones((amb(1))), constraint=constraints.positive)
    arg_30 = pyro.param('arg_30', torch.ones((amb(1))), constraint=constraints.positive)
    mu_age_edu = pyro.sample('mu_age_edu'.format(''), dist.Beta(arg_29,arg_30))
    arg_31 = pyro.param('arg_31', torch.ones((amb(n_age))), constraint=constraints.positive)
    arg_32 = pyro.param('arg_32', torch.ones((amb(n_age))), constraint=constraints.positive)
    with pyro.iarange('b_age_raw_prange'):
        b_age_raw = pyro.sample('b_age_raw'.format(''), dist.Gamma(arg_31,arg_32))
    arg_33 = pyro.param('arg_33', torch.ones((amb(n_edu))), constraint=constraints.positive)
    with pyro.iarange('b_edu_raw_prange'):
        b_edu_raw = pyro.sample('b_edu_raw'.format(''), dist.Exponential(arg_33))
    arg_34 = pyro.param('arg_34', torch.ones((amb(4))), constraint=constraints.positive)
    arg_35 = pyro.param('arg_35', torch.ones((amb(4))), constraint=constraints.positive)
    with pyro.iarange('beta_prange'):
        beta = pyro.sample('beta'.format(''), dist.Pareto(arg_34,arg_35))
    arg_36 = pyro.param('arg_36', torch.ones((amb(1))), constraint=constraints.positive)
    b_v_prev_raw = pyro.sample('b_v_prev_raw'.format(''), dist.Exponential(arg_36))
    arg_37 = pyro.param('arg_37', torch.ones((amb(n_region))), constraint=constraints.positive)
    arg_38 = pyro.param('arg_38', torch.ones((amb(n_region))), constraint=constraints.positive)
    with pyro.iarange('b_region_raw_prange'):
        b_region_raw = pyro.sample('b_region_raw'.format(''), dist.Gamma(arg_37,arg_38))
    
    pass
    return { "b_black": b_black,"b_region_raw": b_region_raw,"sigma_state_raw": sigma_state_raw,"sigma_age_edu_raw": sigma_age_edu_raw,"sigma_edu_raw": sigma_edu_raw,"sigma_region_raw": sigma_region_raw,"b_female": b_female,"xi_age": xi_age,"b_age_raw": b_age_raw,"mu": mu,"mu_age_edu": mu_age_edu,"beta": beta,"b_female_black": b_female_black,"b_edu_raw": b_edu_raw,"xi_edu": xi_edu,"xi_age_edu": xi_age_edu,"b_0": b_0,"b_v_prev_raw": b_v_prev_raw,"xi_state": xi_state,"sigma_age_raw": sigma_age_raw, }
optim = Adam({'lr': 0.05})
svi = SVI(model, guide, optim, loss=Trace_ELBO() if pyro.__version__ > '0.1.2' else 'ELBO')
for i in range(4000):
    loss = svi.step(v_prev,n_age,n_age_edu,age,edu,n_edu,N,state,black,n_region,female,n_state,y,age_edu,region)
    if ((i % 1000) == 0):
        print(loss)
for name in pyro.get_param_store().get_all_param_names():
    print(('{0} : {1}'.format(name, pyro.param(name).data.numpy())))
print('sigma_state_raw_mean', np.array2string(dist.Beta(pyro.param('arg_1'), pyro.param('arg_2')).mean.detach().numpy(), separator=','))
print('b_edu_raw_mean', np.array2string(dist.Exponential(pyro.param('arg_33')).mean.detach().numpy(), separator=','))
print('xi_edu_mean', np.array2string(dist.Normal(pyro.param('arg_3'), pyro.param('arg_4')).mean.detach().numpy(), separator=','))
print('b_0_mean', np.array2string(dist.Normal(pyro.param('arg_5'), pyro.param('arg_6')).mean.detach().numpy(), separator=','))
print('xi_state_mean', np.array2string(dist.Gamma(pyro.param('arg_7'), pyro.param('arg_8')).mean.detach().numpy(), separator=','))
print('b_black_mean', np.array2string(dist.Gamma(pyro.param('arg_9'), pyro.param('arg_10')).mean.detach().numpy(), separator=','))
print('b_female_black_mean', np.array2string(dist.Exponential(pyro.param('arg_11')).mean.detach().numpy(), separator=','))
print('sigma_edu_raw_mean', np.array2string(dist.Gamma(pyro.param('arg_12'), pyro.param('arg_13')).mean.detach().numpy(), separator=','))
print('b_region_raw_mean', np.array2string(dist.Gamma(pyro.param('arg_37'), pyro.param('arg_38')).mean.detach().numpy(), separator=','))
print('xi_age_edu_mean', np.array2string(dist.LogNormal(pyro.param('arg_14'), pyro.param('arg_15')).mean.detach().numpy(), separator=','))
print('b_female_mean', np.array2string(dist.LogNormal(pyro.param('arg_16'), pyro.param('arg_17')).mean.detach().numpy(), separator=','))
print('xi_age_mean', np.array2string(dist.Pareto(pyro.param('arg_18'), pyro.param('arg_19')).mean.detach().numpy(), separator=','))
print('b_age_raw_mean', np.array2string(dist.Gamma(pyro.param('arg_31'), pyro.param('arg_32')).mean.detach().numpy(), separator=','))
print('mu_age_edu_mean', np.array2string(dist.Beta(pyro.param('arg_29'), pyro.param('arg_30')).mean.detach().numpy(), separator=','))
print('beta_mean', np.array2string(dist.Pareto(pyro.param('arg_34'), pyro.param('arg_35')).mean.detach().numpy(), separator=','))
print('b_v_prev_raw_mean', np.array2string(dist.Exponential(pyro.param('arg_36')).mean.detach().numpy(), separator=','))
print('sigma_age_edu_raw_mean', np.array2string(dist.Gamma(pyro.param('arg_20'), pyro.param('arg_21')).mean.detach().numpy(), separator=','))
print('mu_mean', np.array2string(dist.StudentT(pyro.param('arg_26')).mean.detach().numpy(), separator=','))
print('sigma_region_raw_mean', np.array2string(dist.Pareto(pyro.param('arg_22'), pyro.param('arg_23')).mean.detach().numpy(), separator=','))
print('sigma_age_raw_mean', np.array2string(dist.Weibull(pyro.param('arg_24'), pyro.param('arg_25')).mean.detach().numpy(), separator=','))
np.set_printoptions(threshold=np.inf)
with open('samples','w') as samplefile:
    samplefile.write('b_black:')
    samplefile.write(np.array2string(np.array([guide(v_prev,n_age,n_age_edu,age,edu,n_edu,N,state,black,n_region,female,n_state,y,age_edu,region)['b_black'].data.numpy() for _ in range(1000)]), separator=',').replace('\n',''))
    samplefile.write('\n')
    samplefile.write('b_region_raw:')
    samplefile.write(np.array2string(np.array([guide(v_prev,n_age,n_age_edu,age,edu,n_edu,N,state,black,n_region,female,n_state,y,age_edu,region)['b_region_raw'].data.numpy() for _ in range(1000)]), separator=',').replace('\n',''))
    samplefile.write('\n')
    samplefile.write('sigma_state_raw:')
    samplefile.write(np.array2string(np.array([guide(v_prev,n_age,n_age_edu,age,edu,n_edu,N,state,black,n_region,female,n_state,y,age_edu,region)['sigma_state_raw'].data.numpy() for _ in range(1000)]), separator=',').replace('\n',''))
    samplefile.write('\n')
    samplefile.write('sigma_age_edu_raw:')
    samplefile.write(np.array2string(np.array([guide(v_prev,n_age,n_age_edu,age,edu,n_edu,N,state,black,n_region,female,n_state,y,age_edu,region)['sigma_age_edu_raw'].data.numpy() for _ in range(1000)]), separator=',').replace('\n',''))
    samplefile.write('\n')
    samplefile.write('sigma_edu_raw:')
    samplefile.write(np.array2string(np.array([guide(v_prev,n_age,n_age_edu,age,edu,n_edu,N,state,black,n_region,female,n_state,y,age_edu,region)['sigma_edu_raw'].data.numpy() for _ in range(1000)]), separator=',').replace('\n',''))
    samplefile.write('\n')
    samplefile.write('sigma_region_raw:')
    samplefile.write(np.array2string(np.array([guide(v_prev,n_age,n_age_edu,age,edu,n_edu,N,state,black,n_region,female,n_state,y,age_edu,region)['sigma_region_raw'].data.numpy() for _ in range(1000)]), separator=',').replace('\n',''))
    samplefile.write('\n')
    samplefile.write('b_female:')
    samplefile.write(np.array2string(np.array([guide(v_prev,n_age,n_age_edu,age,edu,n_edu,N,state,black,n_region,female,n_state,y,age_edu,region)['b_female'].data.numpy() for _ in range(1000)]), separator=',').replace('\n',''))
    samplefile.write('\n')
    samplefile.write('xi_age:')
    samplefile.write(np.array2string(np.array([guide(v_prev,n_age,n_age_edu,age,edu,n_edu,N,state,black,n_region,female,n_state,y,age_edu,region)['xi_age'].data.numpy() for _ in range(1000)]), separator=',').replace('\n',''))
    samplefile.write('\n')
    samplefile.write('b_age_raw:')
    samplefile.write(np.array2string(np.array([guide(v_prev,n_age,n_age_edu,age,edu,n_edu,N,state,black,n_region,female,n_state,y,age_edu,region)['b_age_raw'].data.numpy() for _ in range(1000)]), separator=',').replace('\n',''))
    samplefile.write('\n')
    samplefile.write('mu:')
    samplefile.write(np.array2string(np.array([guide(v_prev,n_age,n_age_edu,age,edu,n_edu,N,state,black,n_region,female,n_state,y,age_edu,region)['mu'].data.numpy() for _ in range(1000)]), separator=',').replace('\n',''))
    samplefile.write('\n')
    samplefile.write('mu_age_edu:')
    samplefile.write(np.array2string(np.array([guide(v_prev,n_age,n_age_edu,age,edu,n_edu,N,state,black,n_region,female,n_state,y,age_edu,region)['mu_age_edu'].data.numpy() for _ in range(1000)]), separator=',').replace('\n',''))
    samplefile.write('\n')
    samplefile.write('beta:')
    samplefile.write(np.array2string(np.array([guide(v_prev,n_age,n_age_edu,age,edu,n_edu,N,state,black,n_region,female,n_state,y,age_edu,region)['beta'].data.numpy() for _ in range(1000)]), separator=',').replace('\n',''))
    samplefile.write('\n')
    samplefile.write('b_female_black:')
    samplefile.write(np.array2string(np.array([guide(v_prev,n_age,n_age_edu,age,edu,n_edu,N,state,black,n_region,female,n_state,y,age_edu,region)['b_female_black'].data.numpy() for _ in range(1000)]), separator=',').replace('\n',''))
    samplefile.write('\n')
    samplefile.write('b_edu_raw:')
    samplefile.write(np.array2string(np.array([guide(v_prev,n_age,n_age_edu,age,edu,n_edu,N,state,black,n_region,female,n_state,y,age_edu,region)['b_edu_raw'].data.numpy() for _ in range(1000)]), separator=',').replace('\n',''))
    samplefile.write('\n')
    samplefile.write('xi_edu:')
    samplefile.write(np.array2string(np.array([guide(v_prev,n_age,n_age_edu,age,edu,n_edu,N,state,black,n_region,female,n_state,y,age_edu,region)['xi_edu'].data.numpy() for _ in range(1000)]), separator=',').replace('\n',''))
    samplefile.write('\n')
    samplefile.write('xi_age_edu:')
    samplefile.write(np.array2string(np.array([guide(v_prev,n_age,n_age_edu,age,edu,n_edu,N,state,black,n_region,female,n_state,y,age_edu,region)['xi_age_edu'].data.numpy() for _ in range(1000)]), separator=',').replace('\n',''))
    samplefile.write('\n')
    samplefile.write('b_0:')
    samplefile.write(np.array2string(np.array([guide(v_prev,n_age,n_age_edu,age,edu,n_edu,N,state,black,n_region,female,n_state,y,age_edu,region)['b_0'].data.numpy() for _ in range(1000)]), separator=',').replace('\n',''))
    samplefile.write('\n')
    samplefile.write('b_v_prev_raw:')
    samplefile.write(np.array2string(np.array([guide(v_prev,n_age,n_age_edu,age,edu,n_edu,N,state,black,n_region,female,n_state,y,age_edu,region)['b_v_prev_raw'].data.numpy() for _ in range(1000)]), separator=',').replace('\n',''))
    samplefile.write('\n')
    samplefile.write('xi_state:')
    samplefile.write(np.array2string(np.array([guide(v_prev,n_age,n_age_edu,age,edu,n_edu,N,state,black,n_region,female,n_state,y,age_edu,region)['xi_state'].data.numpy() for _ in range(1000)]), separator=',').replace('\n',''))
    samplefile.write('\n')
    samplefile.write('sigma_age_raw:')
    samplefile.write(np.array2string(np.array([guide(v_prev,n_age,n_age_edu,age,edu,n_edu,N,state,black,n_region,female,n_state,y,age_edu,region)['sigma_age_raw'].data.numpy() for _ in range(1000)]), separator=',').replace('\n',''))
    samplefile.write('\n')
