functions {
  float bivariate_poisson_log_lpmf(int[] n,float log_lambda,float p) {
    float s[min(n) + 1]
    float log_theta_1
    float log_theta_0
    log_theta_1 = log_lambda + log(p) + log1m(p)
    log_theta_0 = log_lambda + log(p) * 2

    if (size(n) != 2){
      reject("Size of n must be 2.")
      }
    if (p < 0){
      reject("p must be in [0,1].")
      }
    if (p > 1){
      reject("p must be in [0,1].")
      }
    for (u in 0:min(n))
      s[u + 1] = poisson_log_lpmf(n[1] - u ,log_theta_1)
               + poisson_log_lpmf(n[2] - u ,log_theta_1)
               + poisson_log_lpmf(u ,log_theta_0)
    return(log_sum_exp(s))
  }
}
R : 95
T : 2
K : 100
y : [[[0,0,0,1,0,0,0],[0,0,0,0,0,0,0]],[[0,0,0,0,0,-1,0],[-1,0,0,0,0,0,-1]],[[0,0,0,-1,0,0,-1],[0,0,0,0,-1,0,0]],[[0,0,0,0,0,0,0],[0,-1,0,0,0,0,0]],[[0,-1,0,0,0,0,0],[1,0,0,-1,0,0,0]],[[-1,0,0,0,-1,-1,-1],[0,-1,0,0,-1,0,0]],[[0,0,0,0,0,-1,-1],[-1,-1,0,-1,0,0,0]],[[0,0,0,0,0,0,0],[0,0,1,0,0,0,0]],[[0,0,-1,0,-1,0,0],[0,0,0,-1,0,0,0]],[[-1,0,0,-1,0,0,0],[0,-1,0,0,0,0,0]],[[0,0,1,0,0,-1,0],[0,0,0,0,0,-1,0]],[[0,0,0,0,0,0,0],[-1,0,0,0,-1,0,0]],[[0,-1,-1,-1,0,-1,0],[0,-1,0,0,0,0,0]],[[0,0,-1,-1,-1,-1,0],[-1,0,0,0,0,0,0]],[[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0],[0,0,0,0,-1,0,0]],[[-1,0,0,0,0,-1,0],[0,0,0,0,0,0,0]],[[0,0,-1,0,0,0,0],[0,0,0,0,0,0,0]],[[0,0,0,0,-1,0,0],[0,-1,0,0,0,0,0]],[[-1,0,0,0,0,-1,0],[0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0],[0,-1,0,0,-1,0,0]],[[0,0,-1,0,0,0,0],[0,0,0,0,0,0,-1]],[[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]],[[0,-1,0,0,0,-1,0],[0,0,0,0,-1,0,0]],[[0,0,-1,0,0,0,0],[0,0,0,0,0,0,0]],[[0,0,0,0,0,1,0],[0,0,0,0,1,0,0]],[[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0],[0,0,0,0,0,0,5]],[[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]],[[0,0,0,0,0,1,0],[0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]],[[2,0,0,0,0,0,0],[0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0],[2,0,0,1,0,0,0]],[[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0],[0,0,0,7,0,0,0]],[[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]],[[0,0,1,0,0,0,0],[0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0],[0,0,0,0,0,0,5]],[[0,1,0,0,2,0,0],[0,0,0,0,1,0,0]],[[0,0,0,0,0,0,2],[0,4,0,0,0,1,0]],[[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0],[2,0,0,0,0,0,0]],[[0,2,1,2,0,0,0],[0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0],[0,0,0,0,1,0,0]],[[0,0,0,0,0,0,0],[0,0,0,3,0,0,0]],[[0,1,0,0,0,0,0],[0,1,0,0,0,0,0]],[[0,2,0,1,0,3,0],[0,0,0,0,0,0,0]],[[0,1,0,0,0,0,0],[0,0,0,0,0,0,0]],[[0,0,0,0,4,0,2],[0,0,0,0,0,1,1]],[[2,0,0,0,0,0,0],[0,0,0,1,0,0,0]],[[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]],[[0,0,0,0,0,2,1],[7,0,0,0,1,1,0]],[[0,0,0,0,0,2,0],[0,0,0,0,0,2,0]],[[0,0,1,0,0,0,2],[0,0,9,0,0,0,0]],[[1,0,0,0,0,3,0],[1,0,0,0,0,0,0]],[[0,5,0,0,0,0,0],[0,0,9,3,1,2,13]],[[0,0,2,0,0,0,0],[1,0,0,0,0,0,0]],[[0,0,1,0,0,0,0],[0,0,0,0,0,0,0]],[[0,0,2,0,6,0,1],[1,0,0,1,0,0,0]],[[0,0,0,0,1,0,0],[0,0,1,0,0,0,2]],[[0,0,0,0,0,0,3],[0,0,0,0,0,0,0]],[[0,0,9,1,1,0,0],[1,3,0,0,2,3,0]],[[1,0,0,0,0,0,4],[4,2,4,8,0,0,1]],[[0,0,0,0,0,0,0],[0,0,0,0,3,0,1]],[[0,0,0,0,1,0,0],[0,0,0,2,0,0,1]],[[0,2,0,2,0,0,10],[0,0,0,0,0,0,2]],[[0,0,0,0,0,0,3],[0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0],[1,1,0,0,0,0,0]],[[1,0,0,0,0,1,0],[0,0,6,1,0,0,0]],[[0,0,1,7,2,2,0],[5,0,1,4,0,0,0]],[[0,4,0,0,0,1,0],[0,2,0,1,0,0,0]],[[0,0,0,0,0,0,0],[0,0,0,2,0,4,0]],[[3,0,0,7,0,0,0],[0,0,0,3,0,0,0]],[[0,0,0,2,0,0,0],[0,0,0,0,1,0,0]],[[0,0,0,0,1,0,0],[0,0,0,3,0,0,1]],[[0,0,0,0,0,0,5],[0,0,0,0,0,0,1]],[[14,2,1,0,10,0,0],[2,0,0,0,0,3,0]],[[0,0,3,0,0,0,0],[1,0,0,0,0,0,0]],[[0,0,0,0,0,0,0],[1,0,1,0,1,0,0]],[[9,0,0,0,0,0,0],[1,0,0,1,0,0,0]],[[1,0,0,0,1,0,0],[0,1,-1,0,0,-1,0]],[[0,0,0,-1,0,0,1],[0,0,1,0,0,0,0]],[[-1,0,1,2,0,1,3],[0,0,0,1,6,2,3]],[[0,3,-1,1,1,0,-1],[0,1,2,0,0,-1,1]],[[0,0,0,-1,1,0,0],[0,0,2,1,0,0,0]],[[0,0,0,0,0,0,0],[0,0,0,0,8,0,0]],[[0,0,0,0,1,1,0],[0,0,0,2,2,0,0]],[[0,0,0,0,0,0,-1],[0,1,-1,0,0,0,0]],[[-1,0,0,0,0,0,2],[0,0,0,0,-1,0,0]],[[6,0,0,1,0,0,0],[0,5,1,1,0,1,-1]],[[0,0,0,-1,0,1,3],[0,0,-1,1,0,0,1]],[[-1,0,0,0,0,0,1],[0,0,0,0,0,0,0]]] [R,T,7]
first : [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,1,1,1,1,2,1,1,1,3,1,1,3,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,3,1,1,1,3,1,1,1,2,2,3,1,2,1,1,3,1,1,1,1,1,1,1,2,2,2,2,1,2] [R]
last : [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,7,7,6,7,7,7,7,6,7,7,7,7,7,7,7,7,7,7,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,7,7,7,6,7,7,7,7,7,6,7,7,7,7,6,7,7,7,7,7,7,7,7,7,7,7,7,7] [R]
transformeddata {
  int<lower=0> max_y[R,7]

  for (i in 1:R) {
    for (k in 1:(first[i] - 1)){
      max_y[i,k] = 0
      }
    for (k in (last[i] + 1):7){
      max_y[i,k] = 0
      }
    for (k in first[i]:last[i]){
      int temp[T]
      for(kk in 1:T){
      temp[kk] = y[i, kk, k]
      }
      max_y[i,k] = max(temp)
      }
  }
}
alpha_lam := normal<7>(0,10)
p := normal<7>(1234.0,1234.0)<lower=0,upper=1>
for (i in 1:R){
    for (k in first[i]:last[i]){
      int temp[T]
      for(kk in 1:T){
          temp[kk] = y[i,kk,k]
          }
      observe(bivariate_poisson_log(alpha_lam[k],p[k]),temp)
      }
}
generatedquantities {
  int totalN[7]
  float fit
  float fit_new
  vector[7] mean_abundance
  int N[R,7]            
  float eval[R,7]     
  int y_new[R,T,7]
  matrix[T,7] E[R]
  matrix[T,7] E_new[R]
  fit = 0
  fit_new = 0
    N = rep_array(0,R,7)
    E[1] = rep_matrix(0,T,7)
    E_new[1] = rep_matrix(0,T,7)
    for (i in 2:R) {
      E[i] = E[i - 1]
      E_new[i] = E_new[i - 1]
    }
    for (i in 1:R) {
      for (k in first[i]:last[i]) {
        vector[K + 1] lp

        for (n in 0:(max_y[i,k] - 1)){
          lp[n + 1] = negative_infinity()
          }
        for (n in max_y[i,k]:K){
          int temp[T]
          for(kk in 1:T){
          temp[kk] = y[i, kk, k]
          }
          lp[n + 1] = poisson_log_lpmf(n,alpha_lam[k])
            + binomial_lpmf(temp ,n,p[k])
            }
        N[i,k] = categorical_rng(softmax(lp)) - 1
        eval[i,k] = p[k] * N[i,k]
        for (j in 1:T) {
          E[i,j,k] = square(y[i,j,k] - eval[i,k]) / (eval[i,k] + 0.5)


          y_new[i,j,k] = binomial_rng(N[i,k],p[k])
          E_new[i,j,k] = square(y_new[i,j,k] - eval[i,k]) / (eval[i,k] + 0.5)
        }
      }
    }
    for (k in 1:7){
      int temp[R,7]
      temp = N[1:R]
      totalN[k] = sum(temp[k])
      }
    for (i in 1:R) {
      fit = fit + sum(E[i])
      fit_new = fit_new + sum(E_new[i])
    }
  
  mean_abundance = exp(alpha_lam)
}
posterior(alpha_lam)
posterior(p)