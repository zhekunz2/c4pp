M : 237
T :3
y :[[0,1,1],[1,1,1],[1,1,1],[1,0,1],[0,1,0],[0,0,0],[0,0,0],[1,1,1],[1,0,0],[1,0,1],[0,0,1],[1,1,1],[1,0,1],[1,0,0],[1,0,0],[1,1,1],[0,1,0],[1,1,0],[0,1,0],[1,0,1],[0,1,0],[1,1,0],[0,1,1],[0,1,0],[1,0,0],[0,1,0],[1,0,0],[0,1,0],[0,0,1],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],[0,0,0],[0,0,1],[0,1,0],[0,1,1],[0,1,1],[1,1,1],[0,0,1],[0,1,1],[0,1,0],[1,1,1],[1,1,1],[0,0,1],[1,1,1],[1,0,0],[0,1,1],[1,1,0],[1,0,1],[0,1,0],[0,1,0],[1,1,1],[0,1,0],[1,0,0],[1,0,1],[0,1,1],[0,1,1],[1,0,1],[1,1,1],[1,1,1],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[1,1,0],[1,1,1],[0,1,1],[0,0,1],[1,1,1],[1,1,0],[0,0,0],[0,1,0],[1,1,1],[1,1,0],[1,0,0],[1,0,0],[1,1,0],[1,1,1],[1,1,1],[0,0,1],[0,0,1],[1,1,0],[1,0,1],[0,0,1],[0,1,0],[1,1,1],[1,0,0],[1,1,1],[0,0,0],[1,1,1],[0,1,0],[1,1,1],[0,1,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]][M,T]
transformeddata {
int<lower=0> s[M]
int<lower=0> C
C = 0
for (i in 1:M) {
s[i] = sum(y[i])
if (s[i] > 0)
C = C + 1
}
}
omega := normal(1234.0,1234.0)<lower=0,upper=1>
p := normal(1234.0,1234.0)<lower=0,upper=1>
for (i in 1:M){
if (s[i] > 0){
increment_log_prob(bernoulli_lpmf(1,omega)
+ binomial_lpmf(s[i],T,p))
}
else{
increment_log_prob(log_sum_exp( bernoulli_lpmf(1,omega)
+ binomial_lpmf(0,T,p),
bernoulli_lpmf(0,omega)))
}
}
generatedquantities {
float omega_nd
int<lower=C,upper=M> N
omega_nd = (omega * (1 - p)^T) / (omega * (1 - p)^T + (1 - omega))
N = C + binomial_rng(M - C,omega_nd)
}
