functions { 
float bivariate_poisson_log_lpmf(int[] n, float log_lambda, float[] p) {
float s[min(n) + 1]

if (size(n) != 2)
  reject("Size of n must be 2.")
if (p[1] < 0)
  reject("p must be in [0,1].")
 if(p[1] > 1)
 reject("p must be in [0,1].")
 if(p[2] < 0)
 reject("p must be in [0,1].")
 if(p[2] > 1)
 reject("p must be in [0,1].")
for (u in 0:min(n)){
  s[u + 1] = poisson_log_lpmf(n[1] - u , log_lambda + log(p[1]) + log1m(p[2]))
    + poisson_log_lpmf(n[2] - u , log_lambda + log(p[2]) + log1m(p[1]))
    + poisson_log_lpmf(u , log_lambda + log(p[1]) + log(p[2]))
    }
return(log_sum_exp(s))
}
}

R : 95
T : 2
K : 70
y : [[[ 0, 0, 0, 1, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0,-1, 0],  [-1, 0, 0, 0, 0, 0,-1]], [[ 0, 0, 0,-1, 0, 0,-1],  [ 0, 0, 0, 0,-1, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0,-1, 0, 0, 0, 0, 0]], [[ 0,-1, 0, 0, 0, 0, 0],  [ 1, 0, 0,-1, 0, 0, 0]], [[-1, 0, 0, 0,-1,-1,-1],  [ 0,-1, 0, 0,-1, 0, 0]], [[ 0, 0, 0, 0, 0,-1,-1],  [-1,-1, 0,-1, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 1, 0, 0, 0, 0]], [[ 0, 0,-1, 0,-1, 0, 0],  [ 0, 0, 0,-1, 0, 0, 0]], [[-1, 0, 0,-1, 0, 0, 0],  [ 0,-1, 0, 0, 0, 0, 0]], [[ 0, 0, 1, 0, 0,-1, 0],  [ 0, 0, 0, 0, 0,-1, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [-1, 0, 0, 0,-1, 0, 0]], [[ 0,-1,-1,-1, 0,-1, 0],  [ 0,-1, 0, 0, 0, 0, 0]], [[ 0, 0,-1,-1,-1,-1, 0],  [-1, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0,-1, 0, 0]], [[-1, 0, 0, 0, 0,-1, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0,-1, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0,-1, 0, 0],  [ 0,-1, 0, 0, 0, 0, 0]], [[-1, 0, 0, 0, 0,-1, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0,-1, 0, 0,-1, 0, 0]], [[ 0, 0,-1, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0,-1]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0,-1, 0, 0, 0,-1, 0],  [ 0, 0, 0, 0,-1, 0, 0]], [[ 0, 0,-1, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 1, 0],  [ 0, 0, 0, 0, 1, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 5]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 1, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 2, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 2, 0, 0, 1, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 7, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 1, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 5]], [[ 0, 1, 0, 0, 2, 0, 0],  [ 0, 0, 0, 0, 1, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 2],  [ 0, 4, 0, 0, 0, 1, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 2, 0, 0, 0, 0, 0, 0]], [[ 0, 2, 1, 2, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 1, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 3, 0, 0, 0]], [[ 0, 1, 0, 0, 0, 0, 0],  [ 0, 1, 0, 0, 0, 0, 0]], [[ 0, 2, 0, 1, 0, 3, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 1, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 4, 0, 2],  [ 0, 0, 0, 0, 0, 1, 1]], [[ 2, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 1, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 2, 1],  [ 7, 0, 0, 0, 1, 1, 0]], [[ 0, 0, 0, 0, 0, 2, 0],  [ 0, 0, 0, 0, 0, 2, 0]], [[ 0, 0, 1, 0, 0, 0, 2],  [ 0, 0, 9, 0, 0, 0, 0]], [[ 1, 0, 0, 0, 0, 3, 0],  [ 1, 0, 0, 0, 0, 0, 0]], [[ 0, 5, 0, 0, 0, 0, 0],  [ 0, 0, 9, 3, 1, 2,13]], [[ 0, 0, 2, 0, 0, 0, 0],  [ 1, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 1, 0, 0, 0, 0],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 2, 0, 6, 0, 1],  [ 1, 0, 0, 1, 0, 0, 0]], [[ 0, 0, 0, 0, 1, 0, 0],  [ 0, 0, 1, 0, 0, 0, 2]], [[ 0, 0, 0, 0, 0, 0, 3],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 9, 1, 1, 0, 0],  [ 1, 3, 0, 0, 2, 3, 0]], [[ 1, 0, 0, 0, 0, 0, 4],  [ 4, 2, 4, 8, 0, 0, 1]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 3, 0, 1]], [[ 0, 0, 0, 0, 1, 0, 0],  [ 0, 0, 0, 2, 0, 0, 1]], [[ 0, 2, 0, 2, 0, 0,10],  [ 0, 0, 0, 0, 0, 0, 2]], [[ 0, 0, 0, 0, 0, 0, 3],  [ 0, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 1, 1, 0, 0, 0, 0, 0]], [[ 1, 0, 0, 0, 0, 1, 0],  [ 0, 0, 6, 1, 0, 0, 0]], [[ 0, 0, 1, 7, 2, 2, 0],  [ 5, 0, 1, 4, 0, 0, 0]], [[ 0, 4, 0, 0, 0, 1, 0],  [ 0, 2, 0, 1, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 2, 0, 4, 0]], [[ 3, 0, 0, 7, 0, 0, 0],  [ 0, 0, 0, 3, 0, 0, 0]], [[ 0, 0, 0, 2, 0, 0, 0],  [ 0, 0, 0, 0, 1, 0, 0]], [[ 0, 0, 0, 0, 1, 0, 0],  [ 0, 0, 0, 3, 0, 0, 1]], [[ 0, 0, 0, 0, 0, 0, 5],  [ 0, 0, 0, 0, 0, 0, 1]], [[14, 2, 1, 0,10, 0, 0],  [ 2, 0, 0, 0, 0, 3, 0]], [[ 0, 0, 3, 0, 0, 0, 0],  [ 1, 0, 0, 0, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 1, 0, 1, 0, 1, 0, 0]], [[ 9, 0, 0, 0, 0, 0, 0],  [ 1, 0, 0, 1, 0, 0, 0]], [[ 1, 0, 0, 0, 1, 0, 0],  [ 0, 1,-1, 0, 0,-1, 0]], [[ 0, 0, 0,-1, 0, 0, 1],  [ 0, 0, 1, 0, 0, 0, 0]], [[-1, 0, 1, 2, 0, 1, 3],  [ 0, 0, 0, 1, 6, 2, 3]], [[ 0, 3,-1, 1, 1, 0,-1],  [ 0, 1, 2, 0, 0,-1, 1]], [[ 0, 0, 0,-1, 1, 0, 0],  [ 0, 0, 2, 1, 0, 0, 0]], [[ 0, 0, 0, 0, 0, 0, 0],  [ 0, 0, 0, 0, 8, 0, 0]], [[ 0, 0, 0, 0, 1, 1, 0],  [ 0, 0, 0, 2, 2, 0, 0]], [[ 0, 0, 0, 0, 0, 0,-1],  [ 0, 1,-1, 0, 0, 0, 0]], [[-1, 0, 0, 0, 0, 0, 2],  [ 0, 0, 0, 0,-1, 0, 0]], [[ 6, 0, 0, 1, 0, 0, 0],  [ 0, 5, 1, 1, 0, 1,-1]], [[ 0, 0, 0,-1, 0, 1, 3],  [ 0, 0,-1, 1, 0, 0, 1]], [[-1, 0, 0, 0, 0, 0, 1],  [ 0, 0, 0, 0, 0, 0, 0]]] [R, 2, 7]
first : [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 3, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 3, 1, 1, 1, 2, 2, 3, 1, 2, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 2] [R]
last : [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 7, 7, 6, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 7, 7, 7, 6, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7] [R]
transformeddata {
int<lower=0> max_y[R, 7]
int<lower=0,upper=R> num_obs_site[7]

for (i in 1:R) {
for (k in 1:(first[i] - 1)){
  max_y[i, k] = 0}
for (k in (last[i] + 1):7){
  max_y[i, k] = 0}
for (k in first[i]:last[i]){
int tmp[T]
for(kk in 1:T){
tmp[kk]=y[i, kk, k]
}
  max_y[i, k] = max(tmp)
  }
}
for (k in 1:7) {
num_obs_site[k] = 0
for (i in 1:R){
  num_obs_site[k] = num_obs_site[k] + (y[i, 1, k] != -1)}
}
}

transformedparam {
vector[R] eps
matrix[R, 7] log_lambda
eps = sd_lam * eps_raw
for (k in 1:7){
for (i in 1:R){
  log_lambda[i, k] = alpha_lam[k] + eps[i]}}
}


alpha_lam := normal<7>(0, sqrt(10))<upper=7>
beta := normal<7>(0, sqrt(10))
eps_raw := normal<R>(0, 1)<upper=7>


sd_lam := normal(1.5, 0.75)<lower=0>
sd_p := normal(1.5, 0.75)<lower=0>

for (i in 1:R){
for (j in 1:T){
  logit_p[i, j] := normal<7>(beta, sd_p)[R,T]<lower=-7,upper=7>
}}

for (i in 1:R){
for (k in first[i]:last[i]){
  int temp[2]
  float temp2[2]
  for(kk in 1:T){
      temp[kk] = y[i, kk, k]
      }
  temp2[1]=logit_p[i,1,k]
  temp2[2]=logit_p[i, 2, k]
  observe(bivariate_poisson_log(log_lambda[i, k],
                                       inv_logit(temp2)), temp)
                                       }
}

generatedquantities{
int totalN[7]
vector[7] mean_abundance
vector[7] mean_N
vector[7] mean_detection
float fit
float fit_new
int N[R, 7]
float eval[R, T, 7]
float y_new[R, T, 7]
vector[7] p[R, T]
matrix[T, 7] E[R]
matrix[T, 7] E_new[R]
matrix[R, 7] ik_p
float temp22[T]
fit = 0
fit_new = 0

N = rep_array(0, R, 7)
ik_p = rep_matrix(0, R, 7)

E[1] = rep_matrix(0, T, 7)
E_new[1] = rep_matrix(0, T, 7)
for (i in 2:R) {
  E[i] = E[i - 1]
  E_new[i] = E_new[i - 1]
}
for (i in 1:R) {
  for (j in 1:T){
    p[i, j] = inv_logit(logit_p[i, j])
    }

  for (k in first[i]:last[i]) {
    vector[K + 1] lp

    for (n in 0:(max_y[i, k] - 1)){
      lp[n + 1] = negative_infinity()
      }
    for (n in max_y[i, k]:K){
      int temp[T]
      float temp2[T]
      for(kk in 1:T){
      temp[kk] = y[i, kk, k]
      }
      for(qq in 1:T){
        temp2[qq]=p[i,qq,k]
      }
      lp[n + 1] = poisson_log_lpmf(n , log_lambda[i, k])
        + binomial_lpmf(temp , n, temp2)
        }
    N[i, k] = categorical_rng(softmax(lp)) - 1
    for (j in 1:T) {

      eval[i, j, k] = p[i, j, k] * N[i, k]
      E[i, j, k] = square(y[i, j, k]
                          - eval[i, j, k]) / (eval[i, j, k] + 0.5)

      y_new[i, j, k] = binomial_rng(N[i, k], p[i, j, k])
      E_new[i, j, k] = square(y_new[i, j, k]
                              - eval[i, j, k]) / (eval[i, j, k] + 0.5)
    }


  for(qq in 1:T){
    temp22[qq]=logit_p[i,qq,k]
  }
    ik_p[i, k] = mean(temp22)
  }
}

for (k in 1:7) {
float ss
float ss2
ss = 0
ss2 = 0
totalN[k] = 0
    for(kk in 1:R){
        totalN[k] = totalN[k] +  N[kk, k]
        ss = ss + exp(log_lambda[kk,k])
        ss2 = ss2 + ik_p[kk,k]
    }

  mean_abundance[k] = ss/R
  mean_N[k] = 1.0 * totalN[k] / num_obs_site[k]
  mean_detection[k] = ss2 / num_obs_site[k]
 }
for (i in 1:R) {
  fit = fit + sum(E[i])
  fit_new = fit_new + sum(E_new[i])
}

}
posterior(alpha_lam)
posterior(beta)
posterior(eps_raw)

posterior(sd_lam)
posterior(sd_p)
posterior(logit_p)
