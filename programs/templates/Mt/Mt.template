y: [[0,1,0],[0,0,0],[0,0,0],[0,1,0],[1,0,0],[0,0,0],[0,0,0],[0,1,1],[0,0,0],[0,0,0],[0,1,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,1],[0,0,0],[0,0,0],[0,0,0],[0,1,0],[0,0,0],[0,0,0],[0,1,0],[0,0,1],[0,0,0],[1,1,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[1,1,1],[1,1,1],[1,0,1],[0,1,1],[0,1,1],[0,0,0],[0,1,1],[1,1,1],[1,0,1],[1,0,1],[1,0,1],[0,1,1],[1,0,1],[1,1,1],[1,0,1],[0,1,0],[1,1,1],[1,1,1],[1,0,1],[1,0,1],[0,1,0],[1,1,0],[1,1,1],[1,1,1],[1,1,1],[0,0,1],[0,0,1],[0,0,0],[0,1,1],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],[1,1,1],[0,1,1],[1,0,1],[0,0,1],[1,1,1],[1,1,1],[0,1,1],[1,1,1],[0,1,1],[1,1,1],[1,1,0],[0,1,1],[0,1,1],[1,1,1],[1,1,1],[1,1,0],[1,1,1],[1,1,0],[1,1,0],[1,0,1],[0,1,1],[0,1,1],[1,1,1],[0,0,1],[1,1,0],[0,1,0],[1,1,1],[1,0,1],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]] [M,T]
M : 237
T : 3
transformeddata {
  int<lower=0> s[M]
  int<lower=0> C
  C = 0
  for (i in 1:M) {
    s[i] = sum(y[i])
    if (s[i] > 0)
      C = C + 1
  }
}
omega := normal(1234.0,1234.0)<lower=0,upper=1>
p := normal<T>(1234.0,1234.0)<lower=0,upper=1>

for (i in 1:M){
if (s[i] > 0){
target =  target + bernoulli_lpmf(1 ,omega)
  + bernoulli_lpmf(y[i] ,p)
  }
else{
target =  target + log_sum_exp(bernoulli_lpmf(1 ,omega)  + bernoulli_lpmf(0 ,p), bernoulli_lpmf(0 ,omega))
}
}
generatedquantities{
float pr
float omega_nd
int<lower=C> N
pr = prod(1 - p)
omega_nd = (omega * pr) / (omega * pr + (1 - omega))
N = C + binomial_rng(M - C,omega_nd)
}
